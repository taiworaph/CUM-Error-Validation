#########################################################################################################

####################### This is for Region A direct-measurement and analysis! ###########################

#########################################################################################################





import pandas as pd

import numpy as np

import os

import warnings

warnings.filterwarnings('ignore')

from matplotlib import pyplot as plt

import seaborn as sns

%matplotlib inline



Ken = pd.read_csv('C:\\Users\\TALABI\\Desktop\\R_MachineLearning\\Test5_1.cst', delimiter='\s+', skiprows=11, dtype={'Intermediate': float, 'Bottom': float}, na_values='**NA**')

Ken["Radius"] = ((Ken.Location_X)**2 + (Ken.Location_Y)**2)**0.5/ 1000



#Assigning Region Values based on the Radius of the die X,Y locations - This is from David -Thank You!

Ken['Region'] = None

for zz in range(len(Ken)):

    if Ken.Radius[zz] < 67.08:

        Ken.Region[zz] = 'A'

    elif ((Ken.Radius[zz] > 67.08 ) & (Ken.Radius[zz] < 94.87)):

        Ken.Region[zz] = 'B'

    elif ((Ken.Radius[zz] > 94.87 ) & (Ken.Radius[zz] < 116.19)):

        Ken.Region[zz] = 'C'

    elif ((Ken.Radius[zz] > 116.19 ) & (Ken.Radius[zz] < 134.16)):

        Ken.Region[zz] = 'D'

    elif (Ken.Radius[zz] > 134.16):

        Ken.Region[zz] = 'E'



#Assigning an edge-pair relationship from the onset#

Ken['edges'] = None

for zzz in range(len(Ken)):

    Ken.edges[zzz] = str(Ken.loc[zzz, 'EP']) + "-" + str(Ken.loc[zzz, 'F_Tag_Bottom'])





Ken["BotCD"] = Ken.Bottom * 10













#Tags for B27A_57ACI_SGS_RevAB

Stair_0Test = Ken[(Ken.Target_Name == "B27A_57ACI_SGSTOP_RevAB")]

Stair_0Test = Stair_0Test.reset_index(drop=True)





#Tags for the Formula zone 0

Stair_0Test = Stair_0Test[(Stair_0Test.F_Tag_Bottom == "TOPZ1T0")|(Stair_0Test.F_Tag_Bottom == "TOPZ2T0") |(Stair_0Test.F_Tag_Bottom == "TOPZ3T0") |(Stair_0Test.F_Tag_Bottom == "TOPZ4T0") |(Stair_0Test.F_Tag_Bottom == "TOPZ5T0") |(Stair_0Test.F_Tag_Bottom == "TOPZ6T0") |(Stair_0Test.F_Tag_Bottom == "TOPZ7T0") |(Stair_0Test.F_Tag_Bottom == "TOPZ8T0")]

Stair_0Test = Stair_0Test.reset_index(drop=True)







#########################################################################################################

####################### This is for Region A direct measurement and analysis ############################

#########################################################################################################







#Subseting the dataset to have regions A, regions BCD and regions E

Stair_0TestA = Stair_0Test[(Stair_0Test.Region == "A")]

Kenny_TrueA = Ken[(Ken.Region == "A")]





Stair_0TestA = Stair_0TestA.reset_index(drop=True)

Kenny_TrueA = Kenny_TrueA.reset_index(drop=True)







list5 = ("TOPZ1T0", "TOPZ2T0", "TOPZ3T0", "TOPZ4T0", "TOPZ5T0", "TOPZ6T0", "TOPZ7T0", "TOPZ8T0")



list7 = []

for ii in range(len(Stair_0TestA)):

    for jj in range(len(list5)):

           if Stair_0TestA.F_Tag_Bottom[ii] == list5[jj]:

                list7.append(Stair_0TestA.index[ii])



Stair_0RealA= Stair_0TestA[Stair_0TestA.index.isin(list7)]



Stair_0RealA = Stair_0RealA.reset_index(drop=True)



list8= ("TOPZ1T0", "TOPZ3T0", "TOPZ4T0", "TOPZ8T0", "TOPZ7T0", "TOPZ5T0", "TOPZ6T0", "TOPZ2T0")

list9 =("Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2")

zoom = []

for k in range (len(Stair_0RealA)):

    for j in range(len(list8)):

        if Stair_0RealA.loc[k, 'F_Tag_Bottom'] == list8[j]:

           zoom.append(list9[j])





Stair_0RealA["Zones"] = zoom

# All-Stair Cum SPEC and Cum Edges

## Negative SPEC

Zones= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]





SPEC_0 = [1849,1828,1785,1046,1250,951,1095,1736]

SPEC_1 = [950,1400,1300,2750,1600,900,1000,750]

SPEC_2 = [850,1200,1150,3000,1300,800,1200,900]

SPEC_3 = [1100,1115,1300,3250,1300,875,1115,1000]

SPEC_4 = [1250,1500,1600,3250,1250,1250,1250,1375]

SPEC_5 = [1500,1600,1750,3100,1300,1250,1400,1500]

SPEC_6 = [1750,1900,2000,3100,1750,1600,1500,1750]

SPEC_7 = [2000,2100,2250,3100,1600,1600,1750,2250]

SPEC_8 = [1750,2000,2000,2750,1500,1750,1600,1800]

SPEC_9 = [1800,2100,2100,2750,1750,2000,1750,2250]

SPEC_10 = [2000,2600,2350,2500,2000,2000,1700,2300]

SPEC_11 = [2200,2600,2200,2500,2000,2000,1700,2300]

SPEC_12 = [2450,3300,2900,3000,1800,2471,2000,2550]





Index_Names = ('ZoneNames','Tier12', 'Tier11', 'Tier10', 'Tier9', 'Tier8', 'Tier7', 'Tier6', 'Tier5','Tier4', 'Tier3', 'Tier2', 'Tier1', 'Tier0')











import numpy as np

SPEC = [Zones, SPEC_12, SPEC_11, SPEC_10, SPEC_9, SPEC_8, SPEC_7, SPEC_6, SPEC_5, SPEC_4, SPEC_3, SPEC_2, SPEC_1, SPEC_0]



import pandas as pd

SPEC2 = pd.DataFrame(SPEC, index= Index_Names, columns= Zones)







#Positive SPEC



Zones1= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]



SPEC_01 = [1849,1828,1785,1046,1400,951,1095,1736]

SPEC_11 = [1200,1700,1100,1400,1600,1125,1200,1000]

SPEC_21 = [1100,1500,1400,1400,1600,1000,1200,950]

SPEC_31 = [1100,1450,1300,1500,1600,1000,1115,1100]

SPEC_41 = [1250,1600,1500,1600,1300,1000,1216,1400]

SPEC_51 = [1500,1700,1600,1350,1500,1000,1000,1500]

SPEC_61 = [1600,1800,1800,1500,1600,1000,1200,1600]

SPEC_71 = [1600,1900,1750,1500,1500,820,1000,1750]

SPEC_81 = [2400,2600,2500,2000,1950,875,1000,2500]

SPEC_91 = [2550,2800,2600,2100,1500,980,975,2750]

SPEC_101 = [2900,3250,2800,2500,2300,800,900,3000]

SPEC_111 = [2900,3500,2750,1800,1900,875,900,2900]

SPEC_121 = [2500,3000,2750,1900,2500,900,900,2500]





Index_Names1 = ('ZoneNames','Tier12', 'Tier11', 'Tier10', 'Tier9', 'Tier8', 'Tier7', 'Tier6', 'Tier5','Tier4', 'Tier3', 'Tier2', 'Tier1', 'Tier0')









import numpy as np

SPEC1 = [Zones1, SPEC_121, SPEC_111, SPEC_101, SPEC_91, SPEC_81, SPEC_71, SPEC_61, SPEC_51, SPEC_41, SPEC_31, SPEC_21, SPEC_11, SPEC_01]



import pandas as pd

SPEC21 = pd.DataFrame(SPEC1, index= Index_Names, columns= Zones)





Edge_0 = [30699.23,32659.9,31905.04,24850.09,25247.99,22758.6,22609.63,30130.3]

Edge_1 = [37396.88,39279.21,38452.26,30322.56,30575.07,28075.11,28327.05,36595.42]

Edge_2 = [43409.73,45186.58,44363.54,35844.79,36090.31,33614.24,33847.37,42395.39]

Edge_3 = [49137.39,50913.2,50204.68,41115.69,41486.21,39011.7,39137.81,48114.91]

Edge_4 = [54891.01,56713.57,56159.17,46295.45,46846.81,44404.54,44307.55,54180.86]

Edge_5 = [61055.72,62964.27,62529.53,51605.78,52316.95,49897.04,49623.29,60618.46]

Edge_6 = [67574.14,69565.81,69159.23,57072.37,57924.29,55535.59,55089.28,67408.94]

Edge_7 = [74199.99,76219.01,75891.41,62473.91,63550.94,61179.42,60515.12,74245.32]

Edge_8 = [80557.73,82613.94,82350.52,67703.21,69023.01,66628.34,65702.82,80794.54]

Edge_9 = [87344.11,89291.87,89096.12,73525.47,75000.02,72646.64,71525.62,87731.82]

Edge_10 = [93909.51,95903.19,95794.47,79266.8,80852.51,78514.98,77279.8,94358.22]

Edge_11 = [100335.9,102247.6,102203.8,85204.91,86805.85,84521.7,83200.05,100850]

Edge_12 = [106887.2,108857.2,108747.9,91435.17,93115.77,90823.32,89471.99,107364.7]





EDGE = [Zones,Edge_12, Edge_11, Edge_10, Edge_9, Edge_8, Edge_7, Edge_6, Edge_5, Edge_4, Edge_3, Edge_2, Edge_1, Edge_0]



EDGE2 = pd.DataFrame(EDGE, index= Index_Names, columns= Zones)



zoom1 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom1.append(SPEC2.iat[13,j])





zoom2 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom2.append(EDGE2.iat[13,j])





zoom1000 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom1000.append(SPEC21.iat[13,j])









Stair_0RealA["SPEC_0"] = zoom1

Stair_0RealA["SPEC_EDGE_0"] = zoom2

Stair_0RealA["SPECPositive"] = zoom1000



Stair_0RealA["CumError"] = Stair_0RealA.BotCD - Stair_0RealA.SPEC_EDGE_0







for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError'] < 0:

        Stair_0RealA["Abs_CumSPEC"] = abs(Stair_0RealA["CumError"]) - Stair_0RealA.SPEC_0

    elif Stair_0RealA.loc[k, 'CumError'] >= 0:

        Stair_0RealA["Abs_CumSPEC"] = abs(Stair_0RealA["CumError"]) - Stair_0RealA.SPECPositive







#Evaluation of Edge 2,3

#Stair Row 1 Evaluation

Stair_1TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "2,3-TOPZ1T1") | (Kenny_TrueA.edges == "2,3-TOPZ2T1") | (Kenny_TrueA.edges == "2,3-TOPZ3T1") | (Kenny_TrueA.edges == "2,3-TOPZ4T1") | (Kenny_TrueA.edges == "2,3-TOPZ5T1") | (Kenny_TrueA.edges == "2,3-TOPZ6T1") | (Kenny_TrueA.edges == "2,3-TOPZ7T1") | (Kenny_TrueA.edges == "2,3-TOPZ8T1"))]

Stair_1TestA = Stair_1TestA.reset_index(drop=True)





zoom3 = []

for k in range (len(Stair_1TestA)):

    if (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ1T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone1')

    elif (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ2T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone2')

    elif (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ3T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone3')

    elif (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ4T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone4')

    elif (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ5T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone5')

    elif (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ6T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone6')

    elif (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ7T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone7')

    elif (Stair_1TestA.loc[k, 'edges'] == "2,3-TOPZ8T1") & (Stair_1TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone8')



Stair_1TestA["Zones"] = zoom3

zoom4 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_1TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_1TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_1TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_1TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_1TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_1TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_1TestA.loc[k, 'F.ID_Y']):

                    zoom4.append(Stair_1TestA.BotCD[k])







Stair_0RealA["Edge_23"] = zoom4



Zones_1= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom5 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom5.append(SPEC2.iat[12,j])





#Adding the Positive SPEC Values

zoom500 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom500.append(SPEC21.iat[12,j])



zoom6 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom6.append(EDGE2.iat[12,j])



Stair_0RealA["SPEC_1"] = zoom5

Stair_0RealA["SPEC_EDGE_1"] = zoom6

Stair_0RealA["SPEC_1Positive"] = zoom500



Stair_0RealA["CumError_1"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23) - Stair_0RealA.SPEC_EDGE_1







for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_1'] < 0:

        Stair_0RealA["Abs_CumSPEC_1"] = abs(Stair_0RealA["CumError_1"]) - Stair_0RealA.SPEC_1

    elif Stair_0RealA.loc[k, 'CumError_1'] >= 0:

        Stair_0RealA["Abs_CumSPEC_1"] = abs(Stair_0RealA["CumError_1"]) - Stair_0RealA.SPEC_1Positive











#Evaluation of Edge 3,4

#Stair Row 2 Evaluation

Stair_2TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "3,4-TOPZ1T2") | (Kenny_TrueA.edges == "3,4-TOPZ2T2") | (Kenny_TrueA.edges == "3,4-TOPZ3T2") | (Kenny_TrueA.edges == "3,4-TOPZ4T2") | (Kenny_TrueA.edges == "3,4-TOPZ5T2") | (Kenny_TrueA.edges == "3,4-TOPZ6T2") | (Kenny_TrueA.edges == "3,4-TOPZ7T2") | (Kenny_TrueA.edges == "3,4-TOPZ8T2"))]

Stair_2TestA = Stair_2TestA.reset_index(drop=True)

zoom7 = []

for k in range (len(Stair_2TestA)):

    if (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ1T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone1')

    elif (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ2T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone2')

    elif (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ3T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone3')

    elif (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ4T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone4')

    elif (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ5T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone5')

    elif (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ6T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

           zoom7.append('Zone6')

    elif (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ7T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone7')

    elif (Stair_2TestA.loc[k, 'edges'] == "3,4-TOPZ8T2") & (Stair_2TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone8')



Stair_2TestA["Zones"] = zoom7

zoom8 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_2TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_2TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_2TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_2TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_2TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_2TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_2TestA.loc[k, 'F.ID_Y']):

                    zoom8.append(Stair_2TestA.BotCD[k])





Stair_0RealA["Edge_34"] = zoom8







Zones_2= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom9 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_2)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom9.append(SPEC2.iat[11,j])





#Adding the Positive SPEC Values

zoom501 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom501.append(SPEC21.iat[11,j])









zoom10 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_2)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom10.append(EDGE2.iat[11,j])



Stair_0RealA["SPEC_2"] = zoom9

Stair_0RealA["SPEC_EDGE_2"] = zoom10

Stair_0RealA["SPEC_2Positive"] = zoom501







Stair_0RealA["CumError_2"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34) - Stair_0RealA.SPEC_EDGE_2



for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_2'] < 0:

        Stair_0RealA["Abs_CumSPEC_2"] = abs(Stair_0RealA["CumError_2"]) - Stair_0RealA.SPEC_2

    elif Stair_0RealA.loc[k, 'CumError_2'] >= 0:

        Stair_0RealA["Abs_CumSPEC_2"] = abs(Stair_0RealA["CumError_2"]) - Stair_0RealA.SPEC_2Positive







#Evaluation of Edge 4,5

#Stair Row 3 Evaluation

Stair_3TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "4,5-TOPZ1T3") | (Kenny_TrueA.edges == "4,5-TOPZ2T3") | (Kenny_TrueA.edges == "4,5-TOPZ3T3") | (Kenny_TrueA.edges == "4,5-TOPZ4T3") | (Kenny_TrueA.edges == "4,5-TOPZ5T3") | (Kenny_TrueA.edges == "4,5-TOPZ6T3") | (Kenny_TrueA.edges == "4,5-TOPZ7T3") | (Kenny_TrueA.edges == "4,5-TOPZ8T3"))]

Stair_3TestA = Stair_3TestA.reset_index(drop=True)

zoom11 = []

for k in range (len(Stair_3TestA)):

    if (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ1T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone1')

    elif (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ2T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone2')

    elif (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ3T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone3')

    elif (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ4T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone4')

    elif (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ5T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone5')

    elif (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ6T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone6')

    elif (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ7T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone7')

    elif (Stair_3TestA.loc[k, 'edges'] == "4,5-TOPZ8T3") & (Stair_3TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone8')



Stair_3TestA["Zones"] = zoom11

zoom12 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_3TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_3TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_3TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_3TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_3TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_3TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_3TestA.loc[k, 'F.ID_Y']):

                    zoom12.append(Stair_3TestA.BotCD[k])





Stair_0RealA["Edge_45"] = zoom12









Zones_3= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom13 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_3)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom13.append(SPEC2.iat[10,j])





#Adding the Positive SPEC Values

zoom502 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom502.append(SPEC21.iat[10,j])









zoom14 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_3)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom14.append(EDGE2.iat[10,j])



Stair_0RealA["SPEC_3"] = zoom13

Stair_0RealA["SPEC_EDGE_3"] = zoom14

Stair_0RealA["SPEC_3Positive"] = zoom502







Stair_0RealA["CumError_3"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 ) - Stair_0RealA.SPEC_EDGE_3





for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_3'] < 0:

        Stair_0RealA["Abs_CumSPEC_3"] = abs(Stair_0RealA["CumError_3"]) - Stair_0RealA.SPEC_3

    elif Stair_0RealA.loc[k, 'CumError_3'] >= 0:

        Stair_0RealA["Abs_CumSPEC_3"] = abs(Stair_0RealA["CumError_3"]) - Stair_0RealA.SPEC_3Positive











#Evaluation of Edge 5,6

#Stair Row 4 Evaluation

Stair_4TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "5,6-TOPZ1T4") | (Kenny_TrueA.edges == "5,6-TOPZ2T4") | (Kenny_TrueA.edges == "5,6-TOPZ3T4") | (Kenny_TrueA.edges == "5,6-TOPZ4T4") | (Kenny_TrueA.edges == "5,6-TOPZ5T4") | (Kenny_TrueA.edges == "5,6-TOPZ6T4") | (Kenny_TrueA.edges == "5,6-TOPZ7T4") | (Kenny_TrueA.edges == "5,6-TOPZ8T4"))]

Stair_4TestA = Stair_4TestA.reset_index(drop=True)

zoom15 = []

for k in range (len(Stair_4TestA)):

    if (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ1T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone1')

    elif (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ2T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone2')

    elif (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ3T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone3')

    elif (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ4T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone4')

    elif (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ5T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone5')

    elif (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ6T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone6')

    elif (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ7T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone7')

    elif (Stair_4TestA.loc[k, 'edges'] == "5,6-TOPZ8T4") & (Stair_4TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone8')



Stair_4TestA["Zones"] = zoom15

zoom16 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_4TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_4TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_4TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_4TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_4TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_4TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_4TestA.loc[k, 'F.ID_Y']):

                    zoom16.append(Stair_4TestA.BotCD[k])





Stair_0RealA["Edge_56"] = zoom16









Zones_4= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom17 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_4)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom17.append(SPEC2.iat[9,j])









#Adding the Positive SPEC Values

zoom503 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom503.append(SPEC21.iat[9,j])







zoom18 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_4)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom18.append(EDGE2.iat[9,j])



Stair_0RealA["SPEC_4"] = zoom17

Stair_0RealA["SPEC_EDGE_4"] = zoom18

Stair_0RealA["SPEC_4Positive"] = zoom503







Stair_0RealA["CumError_4"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 ) - Stair_0RealA.SPEC_EDGE_4





for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_4'] < 0:

        Stair_0RealA["Abs_CumSPEC_4"] = abs(Stair_0RealA["CumError_4"]) - Stair_0RealA.SPEC_4

    elif Stair_0RealA.loc[k, 'CumError_4'] >= 0:

        Stair_0RealA["Abs_CumSPEC_4"] = abs(Stair_0RealA["CumError_4"]) - Stair_0RealA.SPEC_4Positive









#Evaluation of Edge 6,7

#Stair Row 5 Evaluation

Stair_5TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "6,7-TOPZ1T5") | (Kenny_TrueA.edges == "6,7-TOPZ2T5") | (Kenny_TrueA.edges == "6,7-TOPZ3T5") | (Kenny_TrueA.edges == "6,7-TOPZ4T5") | (Kenny_TrueA.edges == "6,7-TOPZ5T5") | (Kenny_TrueA.edges == "6,7-TOPZ6T5") | (Kenny_TrueA.edges == "6,7-TOPZ7T5") | (Kenny_TrueA.edges == "6,7-TOPZ8T5"))]

Stair_5TestA = Stair_5TestA.reset_index(drop=True)

zoom19 = []

for k in range (len(Stair_5TestA)):

    if (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ1T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone1')

    elif (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ2T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone2')

    elif (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ3T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone3')

    elif (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ4T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone4')

    elif (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ5T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone5')

    elif (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ6T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone6')

    elif (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ7T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone7')

    elif (Stair_5TestA.loc[k, 'edges'] == "6,7-TOPZ8T5") & (Stair_5TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone8')



Stair_5TestA["Zones"] = zoom19







zoom20 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_5TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_5TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_5TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_5TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_5TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_5TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_5TestA.loc[k, 'F.ID_Y']):

                    zoom20.append(Stair_5TestA.BotCD[k])









Stair_0RealA["Edge_67"] = zoom20







Zones_5= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom21 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_5)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom21.append(SPEC2.iat[8,j])







#Adding the Positive SPEC Values

zoom504 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom504.append(SPEC21.iat[8,j])









zoom22 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_5)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom22.append(EDGE2.iat[8,j])



Stair_0RealA["SPEC_5"] = zoom21

Stair_0RealA["SPEC_EDGE_5"] = zoom22

Stair_0RealA["SPEC_5Positive"] = zoom504



Stair_0RealA["CumError_5"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 ) - Stair_0RealA.SPEC_EDGE_5





for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_5'] < 0:

        Stair_0RealA["Abs_CumSPEC_5"] = abs(Stair_0RealA["CumError_5"]) - Stair_0RealA.SPEC_5

    elif Stair_0RealA.loc[k, 'CumError_5'] >= 0:

        Stair_0RealA["Abs_CumSPEC_5"] = abs(Stair_0RealA["CumError_5"]) - Stair_0RealA.SPEC_5Positive









#Evaluation of Edge 7,8

#Stair Row 5 Evaluation

Stair_6TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "7,8-TOPZ1T6") | (Kenny_TrueA.edges == "7,8-TOPZ2T6") | (Kenny_TrueA.edges == "7,8-TOPZ3T6") | (Kenny_TrueA.edges == "7,8-TOPZ4T6") | (Kenny_TrueA.edges == "7,8-TOPZ5T6") | (Kenny_TrueA.edges == "7,8-TOPZ6T6") | (Kenny_TrueA.edges == "7,8-TOPZ7T6") | (Kenny_TrueA.edges == "7,8-TOPZ8T6"))]

Stair_6TestA = Stair_6TestA.reset_index(drop=True)

zoom23 = []

for k in range (len(Stair_6TestA)):

    if (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ1T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone1')

    elif (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ2T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone2')

    elif (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ3T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone3')

    elif (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ4T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone4')

    elif (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ5T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone5')

    elif (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ6T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone6')

    elif (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ7T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone7')

    elif (Stair_6TestA.loc[k, 'edges'] == "7,8-TOPZ8T6") & (Stair_6TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone8')



Stair_6TestA["Zones"] = zoom23





zoom24 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_6TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_6TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_6TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_6TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_6TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_6TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_6TestA.loc[k, 'F.ID_Y']):

                    zoom24.append(Stair_6TestA.BotCD[k])





Stair_0RealA["Edge_78"] = zoom24





Zones_6= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom25 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_6)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom25.append(SPEC2.iat[7,j])





#Adding the Positive SPEC Values

zoom505 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom505.append(SPEC21.iat[7,j])





zoom26 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_6)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom26.append(EDGE2.iat[7,j])



Stair_0RealA["SPEC_6"] = zoom25

Stair_0RealA["SPEC_EDGE_6"] = zoom26

Stair_0RealA["SPEC_6Positive"] = zoom505





Stair_0RealA["CumError_6"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 + Stair_0RealA.Edge_78) - Stair_0RealA.SPEC_EDGE_6



for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_6'] < 0:

           Stair_0RealA["Abs_CumSPEC_6"] = abs(Stair_0RealA["CumError_6"]) - Stair_0RealA.SPEC_6

    elif Stair_0RealA.loc[k, 'CumError_6'] >= 0:

        Stair_0RealA["Abs_CumSPEC_6"] = abs(Stair_0RealA["CumError_6"]) - Stair_0RealA.SPEC_6Positive















#Evaluation of Edge 8,9

#Stair Row 6 Evaluation

Stair_7TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "8,9-TOPZ1T7") | (Kenny_TrueA.edges == "8,9-TOPZ2T7") | (Kenny_TrueA.edges == "8,9-TOPZ3T7") | (Kenny_TrueA.edges == "8,9-TOPZ4T7") | (Kenny_TrueA.edges == "8,9-TOPZ5T7") | (Kenny_TrueA.edges == "8,9-TOPZ6T7") | (Kenny_TrueA.edges == "8,9-TOPZ7T7") | (Kenny_TrueA.edges == "8,9-TOPZ8T7"))]

Stair_7TestA = Stair_7TestA.reset_index(drop=True)

zoom27 = []

for k in range (len(Stair_7TestA)):

    if (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ1T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone1')

    elif (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ2T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone2')

    elif (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ3T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone3')

    elif (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ4T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone4')

    elif (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ5T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone5')

    elif (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ6T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone6')

    elif (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ7T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone7')

    elif (Stair_7TestA.loc[k, 'edges'] == "8,9-TOPZ8T7") & (Stair_7TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone8')



Stair_7TestA["Zones"] = zoom27





zoom28 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_7TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_7TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_7TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_7TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_7TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_7TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_7TestA.loc[k, 'F.ID_Y']):

                    zoom28.append(Stair_7TestA.BotCD[k])





Stair_0RealA["Edge_89"] = zoom28





Zones_7= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom29 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_7)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom29.append(SPEC2.iat[6,j])





#Adding the Positive SPEC Values

zoom506 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom506.append(SPEC21.iat[6,j])







zoom30 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_7)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom30.append(EDGE2.iat[6,j])



Stair_0RealA["SPEC_7"] = zoom29

Stair_0RealA["SPEC_EDGE_7"] = zoom30

Stair_0RealA["SPEC_7Positive"] = zoom506







Stair_0RealA["CumError_7"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 + Stair_0RealA.Edge_78 + Stair_0RealA.Edge_89) - Stair_0RealA.SPEC_EDGE_7







for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_7'] < 0:

        Stair_0RealA["Abs_CumSPEC_7"] = abs(Stair_0RealA["CumError_7"]) - Stair_0RealA.SPEC_7

    elif Stair_0RealA.loc[k, 'CumError_7'] >= 0:

        Stair_0RealA["Abs_CumSPEC_7"] = abs(Stair_0RealA["CumError_7"]) - Stair_0RealA.SPEC_7Positive











#Evaluation of Edge 9,10

#Stair Row 7 Evaluation

Stair_8TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "9,10-TOPZ1T8") | (Kenny_TrueA.edges == "9,10-TOPZ2T8") | (Kenny_TrueA.edges == "9,10-TOPZ3T8") | (Kenny_TrueA.edges == "9,10-TOPZ4T8") | (Kenny_TrueA.edges == "9,10-TOPZ5T8") | (Kenny_TrueA.edges == "9,10-TOPZ6T8") | (Kenny_TrueA.edges == "9,10-TOPZ7T8") | (Kenny_TrueA.edges == "9,10-TOPZ8T8"))]

Stair_8TestA = Stair_8TestA.reset_index(drop=True)

zoom31 = []

for k in range (len(Stair_8TestA)):

    if (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ1T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone1')

    elif (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ2T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone2')

    elif (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ3T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone3')

    elif (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ4T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone4')

    elif (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ5T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone5')

    elif (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ6T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone6')

    elif (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ7T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone7')

    elif (Stair_8TestA.loc[k, 'edges'] == "9,10-TOPZ8T8") & (Stair_8TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone8')



Stair_8TestA["Zones"] = zoom31





zoom32 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_8TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_8TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_8TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_8TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_8TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_8TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_8TestA.loc[k, 'F.ID_Y']):

                    zoom32.append(Stair_8TestA.BotCD[k])





Stair_0RealA["Edge_910"] = zoom32





Zones_8= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom33 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_8)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom33.append(SPEC2.iat[5,j])







#Adding the Positive SPEC Values

zoom507 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom507.append(SPEC21.iat[5,j])









zoom34 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_8)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom34.append(EDGE2.iat[5,j])



Stair_0RealA["SPEC_8"] = zoom33

Stair_0RealA["SPEC_EDGE_8"] = zoom34

Stair_0RealA["SPEC_8Positive"] = zoom507







Stair_0RealA["CumError_8"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 + Stair_0RealA.Edge_78 + Stair_0RealA.Edge_89 + Stair_0RealA.Edge_910) - Stair_0RealA.SPEC_EDGE_8





for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_8'] < 0:

           Stair_0RealA["Abs_CumSPEC_8"] = abs(Stair_0RealA["CumError_8"]) - Stair_0RealA.SPEC_8

    elif Stair_0RealA.loc[k, 'CumError_8'] >= 0:

        Stair_0RealA["Abs_CumSPEC_8"] = abs(Stair_0RealA["CumError_8"]) - Stair_0RealA.SPEC_8Positive







#Evaluation of Edge 10,11

#Stair Row 8 Evaluation

Stair_9TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "10,11-TOPZ1T9") | (Kenny_TrueA.edges == "10,11-TOPZ2T9") | (Kenny_TrueA.edges == "10,11-TOPZ3T9") | (Kenny_TrueA.edges == "10,11-TOPZ4T9") | (Kenny_TrueA.edges == "10,11-TOPZ5T9") | (Kenny_TrueA.edges == "10,11-TOPZ6T9") | (Kenny_TrueA.edges == "10,11-TOPZ7T9") | (Kenny_TrueA.edges == "10,11-TOPZ8T9"))]

Stair_9TestA = Stair_9TestA.reset_index(drop=True)

zoom35 = []

for k in range (len(Stair_9TestA)):

    if (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ1T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone1')

    elif (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ2T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone2')

    elif (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ3T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone3')

    elif (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ4T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone4')

    elif (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ5T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone5')

    elif (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ6T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone6')

    elif (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ7T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone7')

    elif (Stair_9TestA.loc[k, 'edges'] == "10,11-TOPZ8T9") & (Stair_9TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone8')



Stair_9TestA["Zones"] = zoom35





zoom36 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_9TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_9TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_9TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_9TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_9TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_9TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_9TestA.loc[k, 'F.ID_Y']):

                    zoom36.append(Stair_9TestA.BotCD[k])





Stair_0RealA["Edge_1011"] = zoom36







Zones_9= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom37 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_9)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom37.append(SPEC2.iat[4,j])





#Adding the Positive SPEC Values

zoom508 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom508.append(SPEC21.iat[4,j])







zoom38 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_9)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom38.append(EDGE2.iat[4,j])



Stair_0RealA["SPEC_9"] = zoom37

Stair_0RealA["SPEC_EDGE_9"] = zoom38

Stair_0RealA["SPEC_9Positive"] = zoom508







Stair_0RealA["CumError_9"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 + Stair_0RealA.Edge_78 + Stair_0RealA.Edge_89 + Stair_0RealA.Edge_910 + Stair_0RealA.Edge_1011) - Stair_0RealA.SPEC_EDGE_9



for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_9'] < 0:

           Stair_0RealA["Abs_CumSPEC_9"] = abs(Stair_0RealA["CumError_9"]) - Stair_0RealA.SPEC_9

    elif Stair_0RealA.loc[k, 'CumError_9'] >= 0:

        Stair_0RealA["Abs_CumSPEC_9"] = abs(Stair_0RealA["CumError_9"]) - Stair_0RealA.SPEC_9Positive

















#Evaluation of Edge 11,12

#Stair Row 9 Evaluation

Stair_10TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "11,12-TOPZ1T10") | (Kenny_TrueA.edges == "11,12-TOPZ2T10") | (Kenny_TrueA.edges == "11,12-TOPZ3T10") | (Kenny_TrueA.edges == "11,12-TOPZ4T10") | (Kenny_TrueA.edges == "11,12-TOPZ5T10") | (Kenny_TrueA.edges == "11,12-TOPZ6T10") | (Kenny_TrueA.edges == "11,12-TOPZ7T10") | (Kenny_TrueA.edges == "11,12-TOPZ8T10"))]

Stair_10TestA = Stair_10TestA.reset_index(drop=True)

zoom39 = []

for k in range (len(Stair_10TestA)):

    if (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ1T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone1')

    elif (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ2T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone2')

    elif (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ3T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone3')

    elif (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ4T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone4')

    elif (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ5T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone5')

    elif (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ6T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone6')

    elif (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ7T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone7')

    elif (Stair_10TestA.loc[k, 'edges'] == "11,12-TOPZ8T10") & (Stair_10TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone8')



Stair_10TestA["Zones"] = zoom39

zoom40 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_10TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_10TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_10TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_10TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_10TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_10TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_10TestA.loc[k, 'F.ID_Y']):

                    zoom40.append(Stair_10TestA.BotCD[k])





Stair_0RealA["Edge_1112"] = zoom40





Zones_10= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom41 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_10)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom41.append(SPEC2.iat[3,j])





#Adding the Positive SPEC Values

zoom509 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom509.append(SPEC21.iat[3,j])





zoom42 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_10)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom42.append(EDGE2.iat[3,j])



Stair_0RealA["SPEC_10"] = zoom41

Stair_0RealA["SPEC_EDGE_10"] = zoom42

Stair_0RealA["SPEC_10Positive"] = zoom509







Stair_0RealA["CumError_10"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 + Stair_0RealA.Edge_78 + Stair_0RealA.Edge_89 + Stair_0RealA.Edge_910 + Stair_0RealA.Edge_1011 + Stair_0RealA.Edge_1112) - Stair_0RealA.SPEC_EDGE_10





for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_10'] < 0:

        Stair_0RealA["Abs_CumSPEC_10"] = abs(Stair_0RealA["CumError_10"]) - Stair_0RealA.SPEC_10

    elif Stair_0RealA.loc[k, 'CumError_10'] >= 0:

        Stair_0RealA["Abs_CumSPEC_10"] = abs(Stair_0RealA["CumError_10"]) - Stair_0RealA.SPEC_10Positive

















#Evaluation of Edge 12,13

#Stair Row 10 Evaluation

Stair_11TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "12,13-TOPZ1T11") | (Kenny_TrueA.edges == "12,13-TOPZ2T11") | (Kenny_TrueA.edges == "12,13-TOPZ3T11") | (Kenny_TrueA.edges == "12,13-TOPZ4T11") | (Kenny_TrueA.edges == "12,13-TOPZ5T11") | (Kenny_TrueA.edges == "12,13-TOPZ6T11") | (Kenny_TrueA.edges == "12,13-TOPZ7T11") | (Kenny_TrueA.edges == "12,13-TOPZ8T11"))]

Stair_11TestA = Stair_11TestA.reset_index(drop=True)

zoom43 = []

for k in range (len(Stair_11TestA)):

    if (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ1T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone1')

    elif (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ2T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone2')

    elif (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ3T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone3')

    elif (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ4T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone4')

    elif (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ5T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone5')

    elif (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ6T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone6')

    elif (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ7T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone7')

    elif (Stair_11TestA.loc[k, 'edges'] == "12,13-TOPZ8T11") & (Stair_11TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone8')



Stair_11TestA["Zones"] = zoom43





zoom44 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_11TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_11TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_11TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_11TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_11TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_11TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_11TestA.loc[k, 'F.ID_Y']):

                    zoom44.append(Stair_11TestA.BotCD[k])





Stair_0RealA["Edge_1213"] = zoom44







Zones_11= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom45 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_11)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom45.append(SPEC2.iat[2,j])







#Adding the Positive SPEC Values

zoom510 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom510.append(SPEC21.iat[2,j])







zoom46 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_11)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom46.append(EDGE2.iat[2,j])



Stair_0RealA["SPEC_11"] = zoom45

Stair_0RealA["SPEC_EDGE_11"] = zoom46

Stair_0RealA["SPEC_11Positive"] = zoom510



Stair_0RealA["CumError_11"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 + Stair_0RealA.Edge_78 + Stair_0RealA.Edge_89 + Stair_0RealA.Edge_910 + Stair_0RealA.Edge_1011 + Stair_0RealA.Edge_1112 + Stair_0RealA.Edge_1213) - Stair_0RealA.SPEC_EDGE_11





for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_11'] < 0:

        Stair_0RealA["Abs_CumSPEC_11"] = abs(Stair_0RealA["CumError_11"]) - Stair_0RealA.SPEC_11

    elif Stair_0RealA.loc[k, 'CumError_11'] >= 0:

        Stair_0RealA["Abs_CumSPEC_11"] = abs(Stair_0RealA["CumError_11"]) - Stair_0RealA.SPEC_11Positive







#Evaluation of Edge 13,14

#Stair Row 11 Evaluation

Stair_12TestA = Kenny_TrueA[((Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueA.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueA.edges == "13,14-TOPZ1T12") | (Kenny_TrueA.edges == "13,14-TOPZ2T12") | (Kenny_TrueA.edges == "13,14-TOPZ3T12") | (Kenny_TrueA.edges == "13,14-TOPZ4T12") | (Kenny_TrueA.edges == "13,14-TOPZ5T12") | (Kenny_TrueA.edges == "13,14-TOPZ6T12") | (Kenny_TrueA.edges == "13,14-TOPZ7T12") | (Kenny_TrueA.edges == "13,14-TOPZ8T12"))]

Stair_12TestA = Stair_12TestA.reset_index(drop=True)

zoom47 = []

for k in range (len(Stair_12TestA)):

    if (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ1T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone1')

    elif (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ2T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone2')

    elif (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ3T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone3')

    elif (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ4T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone4')

    elif (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ5T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone5')

    elif (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ6T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone6')

    elif (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ7T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone7')

    elif (Stair_12TestA.loc[k, 'edges'] == "13,14-TOPZ8T12") & (Stair_12TestA.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone8')



Stair_12TestA["Zones"] = zoom47





zoom48 = []



for l in range(len(Stair_0RealA)):

    for k in range(len(Stair_12TestA)):

        if (Stair_0RealA.loc[l, 'Lot'] == Stair_12TestA.loc[k, 'Lot']) & (Stair_0RealA.loc[l, 'Wafer'] == Stair_12TestA.loc[k, 'Wafer']):

            if (Stair_0RealA.loc[l, 'Zones'] == Stair_12TestA.loc[k, 'Zones']) & (Stair_0RealA.loc[l, 'Region'] == Stair_12TestA.loc[k, 'Region']):

                if (Stair_0RealA.loc[l, 'F.ID_X'] == Stair_12TestA.loc[k, 'F.ID_X']) & (Stair_0RealA.loc[l, 'F.ID_Y'] == Stair_12TestA.loc[k, 'F.ID_Y']):

                    zoom48.append(Stair_12TestA.BotCD[k])





Stair_0RealA["Edge_1314"] = zoom48





Zones_12= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom49 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_12)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom49.append(SPEC2.iat[1,j])





#Adding the Positive SPEC Values

zoom511 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_1)):

        if Stair_0RealA.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom511.append(SPEC21.iat[1,j])







zoom50 = []

for k in range (len(Stair_0RealA)):

    for j in range(len(Zones_12)):

        if Stair_0RealA.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom50.append(EDGE2.iat[1,j])



Stair_0RealA["SPEC_12"] = zoom49

Stair_0RealA["SPEC_EDGE_12"] = zoom50

Stair_0RealA["SPEC_12Positive"] = zoom511







Stair_0RealA["CumError_12"] = (Stair_0RealA.BotCD + Stair_0RealA.Edge_23 + Stair_0RealA.Edge_34 +

Stair_0RealA.Edge_45 + Stair_0RealA.Edge_56 + Stair_0RealA.Edge_67 + Stair_0RealA.Edge_78 + Stair_0RealA.Edge_89 + Stair_0RealA.Edge_910 + Stair_0RealA.Edge_1011 + Stair_0RealA.Edge_1112 + Stair_0RealA.Edge_1213 + Stair_0RealA.Edge_1314) - Stair_0RealA.SPEC_EDGE_12





for k in range(len(Stair_0RealA)):

    if Stair_0RealA.loc[k, 'CumError_12'] < 0:

           Stair_0RealA["Abs_CumSPEC_12"] = abs(Stair_0RealA["CumError_12"]) - Stair_0RealA.SPEC_12

    elif Stair_0RealA.loc[k, 'CumError_12'] >= 0:

        Stair_0RealA["Abs_CumSPEC_12"] = abs(Stair_0RealA["CumError_12"]) - Stair_0RealA.SPEC_12Positive





#Pre-graph plot data massaging and Filtering to remove extreme fliers and thus ensure graphs are as neat as they should be



zoom51= ("Abs_CumSPEC","Abs_CumSPEC_1","Abs_CumSPEC_2","Abs_CumSPEC_3","Abs_CumSPEC_4","Abs_CumSPEC_5", "Abs_CumSPEC_6", "Abs_CumSPEC_7", "Abs_CumSPEC_8", "Abs_CumSPEC_9", "Abs_CumSPEC_10", "Abs_CumSPEC_11", "Abs_CumSPEC_12")

Deletable= []

for Abs_SPEC in zoom51:

    for Abs in list(Stair_0RealA.columns):

        if Abs_SPEC == Abs:

            for p in range(len(Stair_0RealA)):

                if Stair_0RealA.loc[p, Abs] > 2500:

                    Deletable.append(Stair_0RealA.index[p])


Stairs_0Real2A = Stair_0RealA.drop(Stair_0RealA.index[Deletable])

Stairs_0Real2A = Stairs_0Real2A.reset_index(drop=True)







#########################################################################################################

####################### This is for the Region BCD direct measurement and analysis ######################

#########################################################################################################

#########################################################################################################

####################### This is for the Region BCD direct measurement and analysis ######################

#########################################################################################################





#Subseting the dataset to have regions BCD

Stair_0TestBCD = Stair_0Test[(Stair_0Test.Region == "B") | (Stair_0Test.Region == "C") | (Stair_0Test.Region == "D")]

Kenny_TrueBCD = Ken[(Ken.Region == "B") | (Ken.Region == "C") | (Ken.Region == "D")]





Stair_0TestBCD = Stair_0TestBCD.reset_index(drop=True)

Kenny_TrueBCD = Kenny_TrueBCD.reset_index(drop=True)







list5 = ("TOPZ1T0", "TOPZ2T0", "TOPZ3T0", "TOPZ4T0", "TOPZ5T0", "TOPZ6T0", "TOPZ7T0", "TOPZ8T0")



list7 = []

for ii in range(len(Stair_0TestBCD)):

    for jj in range(len(list5)):

            if Stair_0TestBCD.F_Tag_Bottom[ii] == list5[jj]:

                list7.append(Stair_0TestBCD.index[ii])



Stair_0RealBCD = Stair_0TestBCD[Stair_0TestBCD.index.isin(list7)]



Stair_0RealBCD = Stair_0RealBCD.reset_index(drop=True)



list8= ("TOPZ1T0", "TOPZ3T0", "TOPZ4T0", "TOPZ8T0", "TOPZ7T0", "TOPZ5T0", "TOPZ6T0", "TOPZ2T0")

list9 =("Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2")

zoom = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(list8)):

        if Stair_0RealBCD.loc[k, 'F_Tag_Bottom'] == list8[j]:

           zoom.append(list9[j])





Stair_0RealBCD["Zones"] = zoom

# All-Stair Cum SPEC and Cum Edges

## Negative SPEC Region BCD

Zones= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]



SPEC_0 = [1849,1828,1785,1046,1250,951,1095,1736]

SPEC_1 = [950,1400,1300,2750,1600,900,1000,750]

SPEC_2 = [850,1200,1150,3000,1300,800,1200,900]

SPEC_3 = [1100,1115,1300,3250,1300,875,1115,1000]

SPEC_4 = [1250,1500,1600,3250,1250,1250,1250,1375]

SPEC_5 = [1500,1600,1750,3100,1300,1250,1400,1500]

SPEC_6 = [1750,1900,2000,3100,1750,1600,1500,1750]

SPEC_7 = [2000,2100,2250,3100,1600,1600,1750,2250]

SPEC_8 = [1750,2000,2000,2750,1500,1750,1600,1800]

SPEC_9 = [1800,2100,2100,2750,1750,2000,1750,2250]

SPEC_10 = [2000,2000,2250,2500,2000,2000,1700,1800]

SPEC_11 = [1800,2100,1750,2500,2000,2000,1700,1800]

SPEC_12 = [1800,2500,2000,3000,1800,2471,2000,1800]





Index_Names = ('ZoneNames','Tier12', 'Tier11', 'Tier10', 'Tier9', 'Tier8', 'Tier7', 'Tier6', 'Tier5','Tier4', 'Tier3', 'Tier2', 'Tier1', 'Tier0')











import numpy as np

SPEC = [Zones, SPEC_12, SPEC_11, SPEC_10, SPEC_9, SPEC_8, SPEC_7, SPEC_6, SPEC_5, SPEC_4, SPEC_3, SPEC_2, SPEC_1, SPEC_0]



import pandas as pd

SPEC2 = pd.DataFrame(SPEC, index= Index_Names, columns= Zones)







#Positive SPEC- Region BCD

Zones1= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]



SPEC_01 = [1849,1828,1785,1046,1400,951,1095,1736]

SPEC_11 = [1200,1700,1100,1400,1600,1125,1200,1000]

SPEC_21 = [1100,1500,1400,1400,1600,1000,1200,950]

SPEC_31 = [1100,1450,1300,1500,1600,1000,1115,1100]

SPEC_41 = [1250,1600,1500,1600,1300,1000,1216,1400]

SPEC_51 = [1500,1700,1600,1350,1500,1000,1000,1500]

SPEC_61 = [1600,1800,1800,1500,1600,1000,1200,1600]

SPEC_71 = [1600,1900,1750,1500,1500,820,1000,1750]

SPEC_81 = [2400,2600,2500,2000,1950,875,1000,2500]

SPEC_91 = [2550,2800,2600,2100,1600,980,975,2750]

SPEC_101 = [2900,3250,2800,2500,2300,1200,1000,3000]

SPEC_111 = [2900,3500,2750,2100,2000,1300,1150,2900]

SPEC_121 = [2650,3000,2750,2200,2500,1500,1400,2500]





Index_Names1 = ('ZoneNames','Tier12', 'Tier11', 'Tier10', 'Tier9', 'Tier8', 'Tier7', 'Tier6', 'Tier5','Tier4', 'Tier3', 'Tier2', 'Tier1', 'Tier0')





import numpy as np

SPEC1 = [Zones1, SPEC_121, SPEC_111, SPEC_101, SPEC_91, SPEC_81, SPEC_71, SPEC_61, SPEC_51, SPEC_41, SPEC_31, SPEC_21, SPEC_11, SPEC_01]



import pandas as pd

SPEC21 = pd.DataFrame(SPEC1, index= Index_Names, columns= Zones)





Edge_0 = [30699.23,32659.9,31905.04,24850.09,25247.99,22758.6,22609.63,30130.3]

Edge_1 = [37396.88,39279.21,38452.26,30322.56,30575.07,28075.11,28327.05,36595.42]

Edge_2 = [43409.73,45186.58,44363.54,35844.79,36090.31,33614.24,33847.37,42395.39]

Edge_3 = [49137.39,50913.2,50204.68,41115.69,41486.21,39011.7,39137.81,48114.91]

Edge_4 = [54891.01,56713.57,56159.17,46295.45,46846.81,44404.54,44307.55,54180.86]

Edge_5 = [61055.72,62964.27,62529.53,51605.78,52316.95,49897.04,49623.29,60618.46]

Edge_6 = [67574.14,69565.81,69159.23,57072.37,57924.29,55535.59,55089.28,67408.94]

Edge_7 = [74199.99,76219.01,75891.41,62473.91,63550.94,61179.42,60515.12,74245.32]

Edge_8 = [80557.73,82613.94,82350.52,67703.21,69023.01,66628.34,65702.82,80794.54]

Edge_9 = [87344.11,89291.87,89096.12,73525.47,75000.02,72646.64,71525.62,87731.82]

Edge_10 = [93909.51,95903.19,95794.47,79266.8,80852.51,78514.98,77279.8,94358.22]

Edge_11 = [100335.9,102247.6,102203.8,85204.91,86805.85,84521.7,83200.05,100850]

Edge_12 = [106887.2,108857.2,108747.9,91435.17,93115.77,90823.32,89471.99,107364.7]





EDGE = [Zones,Edge_12, Edge_11, Edge_10, Edge_9, Edge_8, Edge_7, Edge_6, Edge_5, Edge_4, Edge_3, Edge_2, Edge_1, Edge_0]



EDGE2 = pd.DataFrame(EDGE, index= Index_Names, columns= Zones)



zoom1 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom1.append(SPEC2.iat[13,j])





zoom2 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom2.append(EDGE2.iat[13,j])





zoom1000 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom1000.append(SPEC21.iat[13,j])





Stair_0RealBCD["SPEC_0"] = zoom1

Stair_0RealBCD["SPEC_EDGE_0"] = zoom2

Stair_0RealBCD["SPECPositive"] = zoom1000



Stair_0RealBCD["CumError"] = Stair_0RealBCD.BotCD - Stair_0RealBCD.SPEC_EDGE_0



for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError'] < 0:

        Stair_0RealBCD["Abs_CumSPEC"] = abs(Stair_0RealBCD["CumError"]) - Stair_0RealBCD.SPEC_0

    elif Stair_0RealBCD.loc[k, 'CumError'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC"] = abs(Stair_0RealBCD["CumError"]) - Stair_0RealBCD.SPECPositive





#Evaluation of Edge 2,3

#Stair Row 1 Evaluation

Stair_1TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "2,3-TOPZ1T1") | (Kenny_TrueBCD.edges == "2,3-TOPZ2T1") | (Kenny_TrueBCD.edges == "2,3-TOPZ3T1") | (Kenny_TrueBCD.edges == "2,3-TOPZ4T1") | (Kenny_TrueBCD.edges == "2,3-TOPZ5T1") | (Kenny_TrueBCD.edges == "2,3-TOPZ6T1") | (Kenny_TrueBCD.edges == "2,3-TOPZ7T1") | (Kenny_TrueBCD.edges == "2,3-TOPZ8T1"))]

Stair_1TestBCD = Stair_1TestBCD.reset_index(drop=True)





zoom3 = []

for k in range (len(Stair_1TestBCD)):

    if (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ1T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone1')

    elif (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ2T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone2')

    elif (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ3T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone3')

    elif (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ4T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone4')

    elif (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ5T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone5')

    elif (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ6T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone6')

    elif (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ7T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone7')

    elif (Stair_1TestBCD.loc[k, 'edges'] == "2,3-TOPZ8T1") & (Stair_1TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone8')



Stair_1TestBCD["Zones"] = zoom3

zoom4 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_1TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_1TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_1TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_1TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_1TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_1TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_1TestBCD.loc[k, 'F.ID_Y']):

                    zoom4.append(Stair_1TestBCD.BotCD[k])







Stair_0RealBCD["Edge_23"] = zoom4





Zones_1= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom5 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom5.append(SPEC2.iat[12,j])





#Adding the Positive SPEC Values

zoom500 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom500.append(SPEC21.iat[12,j])



zoom6 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom6.append(EDGE2.iat[12,j])



Stair_0RealBCD["SPEC_1"] = zoom5

Stair_0RealBCD["SPEC_EDGE_1"] = zoom6

Stair_0RealBCD["SPEC_1Positive"] = zoom500



Stair_0RealBCD["CumError_1"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23) - Stair_0RealBCD.SPEC_EDGE_1







for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_1'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_1"] = abs(Stair_0RealBCD["CumError_1"]) - Stair_0RealBCD.SPEC_1

    elif Stair_0RealBCD.loc[k, 'CumError_1'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_1"] = abs(Stair_0RealBCD["CumError_1"]) - Stair_0RealBCD.SPEC_1Positive





#Evaluation of Edge 3,4

#Stair Row 2 Evaluation

Stair_2TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "3,4-TOPZ1T2") | (Kenny_TrueBCD.edges == "3,4-TOPZ2T2") | (Kenny_TrueBCD.edges == "3,4-TOPZ3T2") | (Kenny_TrueBCD.edges == "3,4-TOPZ4T2") | (Kenny_TrueBCD.edges == "3,4-TOPZ5T2") | (Kenny_TrueBCD.edges == "3,4-TOPZ6T2") | (Kenny_TrueBCD.edges == "3,4-TOPZ7T2") | (Kenny_TrueBCD.edges == "3,4-TOPZ8T2"))]

Stair_2TestBCD = Stair_2TestBCD.reset_index(drop=True)

zoom7 = []

for k in range (len(Stair_2TestBCD)):

    if (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ1T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone1')

    elif (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ2T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone2')

    elif (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ3T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone3')

    elif (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ4T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone4')

    elif (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ5T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone5')

    elif (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ6T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone6')

    elif (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ7T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone7')

    elif (Stair_2TestBCD.loc[k, 'edges'] == "3,4-TOPZ8T2") & (Stair_2TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone8')





Stair_2TestBCD["Zones"] = zoom7

zoom8 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_2TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_2TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_2TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_2TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_2TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_2TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_2TestBCD.loc[k, 'F.ID_Y']):

                    zoom8.append(Stair_2TestBCD.BotCD[k])







Stair_0RealBCD["Edge_34"] = zoom8



Zones_2= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom9 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_2)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom9.append(SPEC2.iat[11,j])





#Adding the Positive SPEC Values

zoom501 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom501.append(SPEC21.iat[11,j])









zoom10 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_2)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom10.append(EDGE2.iat[11,j])



Stair_0RealBCD["SPEC_2"] = zoom9

Stair_0RealBCD["SPEC_EDGE_2"] = zoom10

Stair_0RealBCD["SPEC_2Positive"] = zoom501



Stair_0RealBCD["CumError_2"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34) - Stair_0RealBCD.SPEC_EDGE_2



for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_2'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_2"] = abs(Stair_0RealBCD["CumError_2"]) - Stair_0RealBCD.SPEC_2

    elif Stair_0RealBCD.loc[k, 'CumError_2'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_2"] = abs(Stair_0RealBCD["CumError_2"]) - Stair_0RealBCD.SPEC_2Positive







#Evaluation of Edge 4,5

#Stair Row 3 Evaluation

Stair_3TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "4,5-TOPZ1T3") | (Kenny_TrueBCD.edges == "4,5-TOPZ2T3") | (Kenny_TrueBCD.edges == "4,5-TOPZ3T3") | (Kenny_TrueBCD.edges == "4,5-TOPZ4T3") | (Kenny_TrueBCD.edges == "4,5-TOPZ5T3") | (Kenny_TrueBCD.edges == "4,5-TOPZ6T3") | (Kenny_TrueBCD.edges == "4,5-TOPZ7T3") | (Kenny_TrueBCD.edges == "4,5-TOPZ8T3"))]

Stair_3TestBCD = Stair_3TestBCD.reset_index(drop=True)

zoom11 = []

for k in range (len(Stair_3TestBCD)):

    if (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ1T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone1')

    elif (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ2T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone2')

    elif (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ3T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone3')

    elif (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ4T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone4')

    elif (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ5T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone5')

    elif (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ6T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone6')

    elif (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ7T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone7')

    elif (Stair_3TestBCD.loc[k, 'edges'] == "4,5-TOPZ8T3") & (Stair_3TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone8')



Stair_3TestBCD["Zones"] = zoom11

zoom12 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_3TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_3TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_3TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_3TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_3TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_3TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_3TestBCD.loc[k, 'F.ID_Y']):

                    zoom12.append(Stair_3TestBCD.BotCD[k])







Stair_0RealBCD["Edge_45"] = zoom12





Zones_3= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom13 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_3)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom13.append(SPEC2.iat[10,j])





#Adding the Positive SPEC Values

zoom502 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom502.append(SPEC21.iat[10,j])





zoom14 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_3)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom14.append(EDGE2.iat[10,j])



Stair_0RealBCD["SPEC_3"] = zoom13

Stair_0RealBCD["SPEC_EDGE_3"] = zoom14

Stair_0RealBCD["SPEC_3Positive"] = zoom502







Stair_0RealBCD["CumError_3"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 ) - Stair_0RealBCD.SPEC_EDGE_3





for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_3'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_3"] = abs(Stair_0RealBCD["CumError_3"]) - Stair_0RealBCD.SPEC_3

    elif Stair_0RealBCD.loc[k, 'CumError_3'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_3"] = abs(Stair_0RealBCD["CumError_3"]) - Stair_0RealBCD.SPEC_3Positive





#Evaluation of Edge 5,6

#Stair Row 4 Evaluation

Stair_4TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "5,6-TOPZ1T4") | (Kenny_TrueBCD.edges == "5,6-TOPZ2T4") | (Kenny_TrueBCD.edges == "5,6-TOPZ3T4") | (Kenny_TrueBCD.edges == "5,6-TOPZ4T4") | (Kenny_TrueBCD.edges == "5,6-TOPZ5T4") | (Kenny_TrueBCD.edges == "5,6-TOPZ6T4") | (Kenny_TrueBCD.edges == "5,6-TOPZ7T4") | (Kenny_TrueBCD.edges == "5,6-TOPZ8T4"))]

Stair_4TestBCD = Stair_4TestBCD.reset_index(drop=True)

zoom15 = []

for k in range (len(Stair_4TestBCD)):

    if (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ1T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone1')

    elif (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ2T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone2')

    elif (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ3T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone3')

    elif (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ4T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone4')

    elif (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ5T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone5')

    elif (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ6T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone6')

    elif (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ7T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone7')

    elif (Stair_4TestBCD.loc[k, 'edges'] == "5,6-TOPZ8T4") & (Stair_4TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone8')



Stair_4TestBCD["Zones"] = zoom15

zoom16 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_4TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_4TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_4TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_4TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_4TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_4TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_4TestBCD.loc[k, 'F.ID_Y']):

                    zoom16.append(Stair_4TestBCD.BotCD[k])











Stair_0RealBCD["Edge_56"] = zoom16





Zones_4= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom17 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_4)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom17.append(SPEC2.iat[9,j])





#Adding the Positive SPEC Values

zoom503 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom503.append(SPEC21.iat[9,j])



zoom18 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_4)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom18.append(EDGE2.iat[9,j])



Stair_0RealBCD["SPEC_4"] = zoom17

Stair_0RealBCD["SPEC_EDGE_4"] = zoom18

Stair_0RealBCD["SPEC_4Positive"] = zoom503







Stair_0RealBCD["CumError_4"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 ) - Stair_0RealBCD.SPEC_EDGE_4





for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_4'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_4"] = abs(Stair_0RealBCD["CumError_4"]) - Stair_0RealBCD.SPEC_4

    elif Stair_0RealBCD.loc[k, 'CumError_4'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_4"] = abs(Stair_0RealBCD["CumError_4"]) - Stair_0RealBCD.SPEC_4Positive





#Evaluation of Edge 6,7

#Stair Row 5 Evaluation

Stair_5TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "6,7-TOPZ1T5") | (Kenny_TrueBCD.edges == "6,7-TOPZ2T5") | (Kenny_TrueBCD.edges == "6,7-TOPZ3T5") | (Kenny_TrueBCD.edges == "6,7-TOPZ4T5") | (Kenny_TrueBCD.edges == "6,7-TOPZ5T5") | (Kenny_TrueBCD.edges == "6,7-TOPZ6T5") | (Kenny_TrueBCD.edges == "6,7-TOPZ7T5") | (Kenny_TrueBCD.edges == "6,7-TOPZ8T5"))]

Stair_5TestBCD = Stair_5TestBCD.reset_index(drop=True)

zoom19 = []

for k in range (len(Stair_5TestBCD)):

    if (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ1T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone1')

    elif (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ2T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone2')

    elif (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ3T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone3')

    elif (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ4T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone4')

    elif (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ5T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone5')

    elif (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ6T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone6')

    elif (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ7T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone7')

    elif (Stair_5TestBCD.loc[k, 'edges'] == "6,7-TOPZ8T5") & (Stair_5TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone8')



Stair_5TestBCD["Zones"] = zoom19

zoom20 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_5TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_5TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_5TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_5TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_5TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_5TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_5TestBCD.loc[k, 'F.ID_Y']):

                    zoom20.append(Stair_5TestBCD.BotCD[k])







Stair_0RealBCD["Edge_67"] = zoom20





Zones_5= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom21 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_5)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom21.append(SPEC2.iat[8,j])







#Adding the Positive SPEC Values

zoom504 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom504.append(SPEC21.iat[8,j])



zoom22 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_5)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom22.append(EDGE2.iat[8,j])



Stair_0RealBCD["SPEC_5"] = zoom21

Stair_0RealBCD["SPEC_EDGE_5"] = zoom22

Stair_0RealBCD["SPEC_5Positive"] = zoom504



Stair_0RealBCD["CumError_5"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 ) - Stair_0RealBCD.SPEC_EDGE_5





for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_5'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_5"] = abs(Stair_0RealBCD["CumError_5"]) - Stair_0RealBCD.SPEC_5

    elif Stair_0RealBCD.loc[k, 'CumError_5'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_5"] = abs(Stair_0RealBCD["CumError_5"]) - Stair_0RealBCD.SPEC_5Positive





#Evaluation of Edge 7,8

#Stair Row 5 Evaluation

Stair_6TestBCD = KenBCD[((KenBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (KenBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((KenBCD.edges == "7,8-Z01-T06") | (KenBCD.edges == "7,8-Z02-T06") | (KenBCD.edges == "7,8-Z03-T06") | (KenBCD.edges == "7,8-Z04-T06") | (KenBCD.edges == "7,8-Z05-T06") | (KenBCD.edges == "7,8-Z06-T06") | (KenBCD.edges == "7,8-Z07-T06") | (KenBCD.edges == "7,8-Z08-T06"))]

Stair_6TestBCD = Stair_6TestBCD.reset_index(drop=True)

zoom23 = []

for k in range (len(Stair_6TestBCD)):

    if (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z01-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone1')

    elif (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z02-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone2')

    elif (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z03-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone3')

    elif (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z04-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone4')

    elif (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z05-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone5')

    elif (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z06-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone6')

    elif (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z07-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone7')

    elif (Stair_6TestBCD.loc[k, 'edges'] == "7,8-Z08-T06") & (Stair_6TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone8')



Stair_6TestBCD["Zones"] = zoom23

zoom24 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_6TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_6TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_6TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_6TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_6TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_6TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_6TestBCD.loc[k, 'F.ID_Y']):

                    zoom24.append(Stair_6TestBCD.BotCD[k])







Stair_0RealBCD["Edge_78"] = zoom24





Zones_6= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom25 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_6)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom25.append(SPEC2.iat[7,j])





#Adding the Positive SPEC Values

zoom505 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom505.append(SPEC21.iat[7,j])





zoom26 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_6)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom26.append(EDGE2.iat[7,j])



Stair_0RealBCD["SPEC_6"] = zoom25

Stair_0RealBCD["SPEC_EDGE_6"] = zoom26

Stair_0RealBCD["SPEC_6Positive"] = zoom505





Stair_0RealBCD["CumError_6"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 + Stair_0RealBCD.Edge_78) - Stair_0RealBCD.SPEC_EDGE_6



for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_6'] < 0:

           Stair_0RealBCD["Abs_CumSPEC_6"] = abs(Stair_0RealBCD["CumError_6"]) - Stair_0RealBCD.SPEC_6

    elif Stair_0RealBCD.loc[k, 'CumError_6'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_6"] = abs(Stair_0RealBCD["CumError_6"]) - Stair_0RealBCD.SPEC_6Positive







#Evaluation of Edge 8,9

#Stair Row 6 Evaluation

Stair_7TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "8,9-TOPZ1T7") | (Kenny_TrueBCD.edges == "8,9-TOPZ2T7") | (Kenny_TrueBCD.edges == "8,9-TOPZ3T7") | (Kenny_TrueBCD.edges == "8,9-TOPZ4T7") | (Kenny_TrueBCD.edges == "8,9-TOPZ5T7") | (Kenny_TrueBCD.edges == "8,9-TOPZ6T7") | (Kenny_TrueBCD.edges == "8,9-TOPZ7T7") | (Kenny_TrueBCD.edges == "8,9-TOPZ8T7"))]

Stair_7TestBCD = Stair_7TestBCD.reset_index(drop=True)

zoom27 = []

for k in range (len(Stair_7TestBCD)):

    if (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ1T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone1')

    elif (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ2T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone2')

    elif (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ3T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone3')

    elif (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ4T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone4')

    elif (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ5T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone5')

    elif (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ6T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone6')

    elif (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ7T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone7')

    elif (Stair_7TestBCD.loc[k, 'edges'] == "8,9-TOPZ8T7") & (Stair_7TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone8')



Stair_7TestA["Zones"] = zoom27



Stair_7TestBCD["Zones"] = zoom27

zoom28 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_7TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_7TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_7TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_7TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_7TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_7TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_7TestBCD.loc[k, 'F.ID_Y']):

                    zoom28.append(Stair_7TestBCD.BotCD[k])









Stair_0RealBCD["Edge_89"] = zoom28





Zones_7= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom29 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_7)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom29.append(SPEC2.iat[6,j])





#Adding the Positive SPEC Values

zoom506 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom506.append(SPEC21.iat[6,j])







zoom30 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_7)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom30.append(EDGE2.iat[6,j])



Stair_0RealBCD["SPEC_7"] = zoom29

Stair_0RealBCD["SPEC_EDGE_7"] = zoom30

Stair_0RealBCD["SPEC_7Positive"] = zoom506







Stair_0RealBCD["CumError_7"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 + Stair_0RealBCD.Edge_78 + Stair_0RealBCD.Edge_89) - Stair_0RealBCD.SPEC_EDGE_7







for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_7'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_7"] = abs(Stair_0RealBCD["CumError_7"]) - Stair_0RealBCD.SPEC_7

    elif Stair_0RealBCD.loc[k, 'CumError_7'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_7"] = abs(Stair_0RealBCD["CumError_7"]) - Stair_0RealBCD.SPEC_7Positive







#Evaluation of Edge 9,10

#Stair Row 7 Evaluation

Stair_8TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "9,10-TOPZ1T8") | (Kenny_TrueBCD.edges == "9,10-TOPZ2T8") | (Kenny_TrueBCD.edges == "9,10-TOPZ3T8") | (Kenny_TrueBCD.edges == "9,10-TOPZ4T8") | (Kenny_TrueBCD.edges == "9,10-TOPZ5T8") | (Kenny_TrueBCD.edges == "9,10-TOPZ6T8") | (Kenny_TrueBCD.edges == "9,10-TOPZ7T8") | (Kenny_TrueBCD.edges == "9,10-TOPZ8T8"))]

Stair_8TestBCD = Stair_8TestBCD.reset_index(drop=True)

zoom31 = []

for k in range (len(Stair_8TestBCD)):

    if (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ1T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone1')

    elif (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ2T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone2')

    elif (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ3T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone3')

    elif (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ4T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone4')

    elif (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ5T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone5')

    elif (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ6T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone6')

    elif (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ7T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone7')

    elif (Stair_8TestBCD.loc[k, 'edges'] == "9,10-TOPZ8T8") & (Stair_8TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone8')



Stair_8TestBCD["Zones"] = zoom31

zoom32 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_8TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_8TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_8TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_8TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_8TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_8TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_8TestBCD.loc[k, 'F.ID_Y']):

                    zoom32.append(Stair_8TestBCD.BotCD[k])





Stair_0RealBCD["Edge_910"] = zoom32



Zones_8= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom33 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_8)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom33.append(SPEC2.iat[5,j])







#Adding the Positive SPEC Values

zoom507 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom507.append(SPEC21.iat[5,j])





zoom34 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_8)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom34.append(EDGE2.iat[5,j])



Stair_0RealBCD["SPEC_8"] = zoom33

Stair_0RealBCD["SPEC_EDGE_8"] = zoom34

Stair_0RealBCD["SPEC_8Positive"] = zoom507







Stair_0RealBCD["CumError_8"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 + Stair_0RealBCD.Edge_78 + Stair_0RealBCD.Edge_89 + Stair_0RealBCD.Edge_910) - Stair_0RealBCD.SPEC_EDGE_8





for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_8'] < 0:

           Stair_0RealBCD["Abs_CumSPEC_8"] = abs(Stair_0RealBCD["CumError_8"]) - Stair_0RealBCD.SPEC_8

    elif Stair_0RealBCD.loc[k, 'CumError_8'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_8"] = abs(Stair_0RealBCD["CumError_8"]) - Stair_0RealBCD.SPEC_8Positive





#Evaluation of Edge 10,11

#Stair Row 8 Evaluation

Stair_9TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "10,11-TOPZ1T9") | (Kenny_TrueBCD.edges == "10,11-TOPZ2T9") | (Kenny_TrueBCD.edges == "10,11-TOPZ3T9") | (Kenny_TrueBCD.edges == "10,11-TOPZ4T9") | (Kenny_TrueBCD.edges == "10,11-TOPZ5T9") | (Kenny_TrueBCD.edges == "10,11-TOPZ6T9") | (Kenny_TrueBCD.edges == "10,11-TOPZ7T9") | (Kenny_TrueBCD.edges == "10,11-TOPZ8T9"))]

Stair_9TestBCD = Stair_9TestBCD.reset_index(drop=True)

zoom35 = []

for k in range (len(Stair_9TestBCD)):

    if (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ1T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone1')

    elif (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ2T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone2')

    elif (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ3T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone3')

    elif (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ4T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone4')

    elif (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ5T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone5')

    elif (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ6T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone6')

    elif (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ7T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone7')

    elif (Stair_9TestBCD.loc[k, 'edges'] == "10,11-TOPZ8T9") & (Stair_9TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone8')





Stair_9TestBCD["Zones"] = zoom35

zoom36 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_9TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_9TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_9TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_9TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_9TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_9TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_9TestBCD.loc[k, 'F.ID_Y']):

                    zoom36.append(Stair_9TestBCD.BotCD[k])







Stair_0RealBCD["Edge_1011"] = zoom36





Zones_9= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom37 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_9)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom37.append(SPEC2.iat[4,j])





#Adding the Positive SPEC Values

zoom508 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom508.append(SPEC21.iat[4,j])



zoom38 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_9)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom38.append(EDGE2.iat[4,j])



Stair_0RealBCD["SPEC_9"] = zoom37

Stair_0RealBCD["SPEC_EDGE_9"] = zoom38

Stair_0RealBCD["SPEC_9Positive"] = zoom508







Stair_0RealBCD["CumError_9"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 + Stair_0RealBCD.Edge_78 + Stair_0RealBCD.Edge_89 + Stair_0RealBCD.Edge_910 + Stair_0RealBCD.Edge_1011) - Stair_0RealBCD.SPEC_EDGE_9



for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_9'] < 0:

           Stair_0RealBCD["Abs_CumSPEC_9"] = abs(Stair_0RealBCD["CumError_9"]) - Stair_0RealBCD.SPEC_9

    elif Stair_0RealBCD.loc[k, 'CumError_9'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_9"] = abs(Stair_0RealBCD["CumError_9"]) - Stair_0RealBCD.SPEC_9Positive







#Evaluation of Edge 11,12

#Stair Row 9 Evaluation

Stair_10TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "11,12-TOPZ1T10") | (Kenny_TrueBCD.edges == "11,12-TOPZ2T10") | (Kenny_TrueBCD.edges == "11,12-TOPZ3T10") | (Kenny_TrueBCD.edges == "11,12-TOPZ4T10") | (Kenny_TrueBCD.edges == "11,12-TOPZ5T10") | (Kenny_TrueBCD.edges == "11,12-TOPZ6T10") | (Kenny_TrueBCD.edges == "11,12-TOPZ7T10") | (Kenny_TrueBCD.edges == "11,12-TOPZ8T10"))]

Stair_10TestBCD = Stair_10TestBCD.reset_index(drop=True)

zoom39 = []

for k in range (len(Stair_10TestBCD)):

    if (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ1T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone1')

    elif (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ2T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone2')

    elif (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ3T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone3')

    elif (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ4T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone4')

    elif (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ5T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone5')

    elif (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ6T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone6')

    elif (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ7T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone7')

    elif (Stair_10TestBCD.loc[k, 'edges'] == "11,12-TOPZ8T10") & (Stair_10TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone8')



Stair_10TestBCD["Zones"] = zoom39

zoom40 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_10TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_10TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_10TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_10TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_10TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_10TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_10TestBCD.loc[k, 'F.ID_Y']):

                    zoom40.append(Stair_10TestBCD.BotCD[k])





Stair_0RealBCD["Edge_1112"] = zoom40





Zones_10= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom41 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_10)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom41.append(SPEC2.iat[3,j])





#Adding the Positive SPEC Values

zoom509 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom509.append(SPEC21.iat[3,j])





zoom42 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_10)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom42.append(EDGE2.iat[3,j])



Stair_0RealBCD["SPEC_10"] = zoom41

Stair_0RealBCD["SPEC_EDGE_10"] = zoom42

Stair_0RealBCD["SPEC_10Positive"] = zoom509







Stair_0RealBCD["CumError_10"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 + Stair_0RealBCD.Edge_78 + Stair_0RealBCD.Edge_89 + Stair_0RealBCD.Edge_910 + Stair_0RealBCD.Edge_1011 + Stair_0RealBCD.Edge_1112) - Stair_0RealBCD.SPEC_EDGE_10





for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_10'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_10"] = abs(Stair_0RealBCD["CumError_10"]) - Stair_0RealBCD.SPEC_10

    elif Stair_0RealBCD.loc[k, 'CumError_10'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_10"] = abs(Stair_0RealBCD["CumError_10"]) - Stair_0RealBCD.SPEC_10Positive





#Evaluation of Edge 12,13

#Stair Row 10 Evaluation

Stair_11TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "12,13-TOPZ1T11") | (Kenny_TrueBCD.edges == "12,13-TOPZ2T11") | (Kenny_TrueBCD.edges == "12,13-TOPZ3T11") | (Kenny_TrueBCD.edges == "12,13-TOPZ4T11") | (Kenny_TrueBCD.edges == "12,13-TOPZ5T11") | (Kenny_TrueBCD.edges == "12,13-TOPZ6T11") | (Kenny_TrueBCD.edges == "12,13-TOPZ7T11") | (Kenny_TrueBCD.edges == "12,13-TOPZ8T11"))]

Stair_11TestBCD = Stair_11TestBCD.reset_index(drop=True)

zoom43 = []

for k in range (len(Stair_11TestBCD)):

    if (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ1T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone1')

    elif (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ2T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone2')

    elif (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ3T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone3')

    elif (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ4T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone4')

    elif (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ5T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone5')

    elif (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ6T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone6')

    elif (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ7T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone7')

    elif (Stair_11TestBCD.loc[k, 'edges'] == "12,13-TOPZ8T11") & (Stair_11TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone8')



Stair_11TestBCD["Zones"] = zoom43

zoom44 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_11TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_11TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_11TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_11TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_11TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_11TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_11TestBCD.loc[k, 'F.ID_Y']):

                    zoom44.append(Stair_11TestBCD.BotCD[k])





Stair_0RealBCD["Edge_1213"] = zoom44





Zones_11= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom45 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_11)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom45.append(SPEC2.iat[2,j])



#Adding the Positive SPEC Values

zoom510 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom510.append(SPEC21.iat[2,j])



zoom46 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_11)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom46.append(EDGE2.iat[2,j])



Stair_0RealBCD["SPEC_11"] = zoom45

Stair_0RealBCD["SPEC_EDGE_11"] = zoom46

Stair_0RealBCD["SPEC_11Positive"] = zoom510



Stair_0RealBCD["CumError_11"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 + Stair_0RealBCD.Edge_78 + Stair_0RealBCD.Edge_89 + Stair_0RealBCD.Edge_910 + Stair_0RealBCD.Edge_1011 + Stair_0RealBCD.Edge_1112 + Stair_0RealBCD.Edge_1213) - Stair_0RealBCD.SPEC_EDGE_11





for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_11'] < 0:

        Stair_0RealBCD["Abs_CumSPEC_11"] = abs(Stair_0RealBCD["CumError_11"]) - Stair_0RealBCD.SPEC_11

    elif Stair_0RealBCD.loc[k, 'CumError_11'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_11"] = abs(Stair_0RealBCD["CumError_11"]) - Stair_0RealBCD.SPEC_11Positive





#Evaluation of Edge 13,14

#Stair Row 11 Evaluation

Stair_12TestBCD = Kenny_TrueBCD[((Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueBCD.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueBCD.edges == "13,14-TOPZ1T12") | (Kenny_TrueBCD.edges == "13,14-TOPZ2T12") | (Kenny_TrueBCD.edges == "13,14-TOPZ3T12") | (Kenny_TrueBCD.edges == "13,14-TOPZ4T12") | (Kenny_TrueBCD.edges == "13,14-TOPZ5T12") | (Kenny_TrueBCD.edges == "13,14-TOPZ6T12") | (Kenny_TrueBCD.edges == "13,14-TOPZ7T12") | (Kenny_TrueBCD.edges == "13,14-TOPZ8T12"))]

Stair_12TestBCD = Stair_12TestBCD.reset_index(drop=True)

zoom47 = []

for k in range (len(Stair_12TestBCD)):

    if (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ1T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone1')

    elif (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ2T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone2')

    elif (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ3T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone3')

    elif (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ4T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone4')

    elif (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ5T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone5')

    elif (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ6T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone6')

    elif (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ7T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone7')

    elif (Stair_12TestBCD.loc[k, 'edges'] == "13,14-TOPZ8T12") & (Stair_12TestBCD.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone8')



Stair_12TestBCD["Zones"] = zoom47

zoom48 = []



for l in range(len(Stair_0RealBCD)):

    for k in range(len(Stair_12TestBCD)):

        if (Stair_0RealBCD.loc[l, 'Lot'] == Stair_12TestBCD.loc[k, 'Lot']) & (Stair_0RealBCD.loc[l, 'Wafer'] == Stair_12TestBCD.loc[k, 'Wafer']):

            if (Stair_0RealBCD.loc[l, 'Zones'] == Stair_12TestBCD.loc[k, 'Zones']) & (Stair_0RealBCD.loc[l, 'Region'] == Stair_12TestBCD.loc[k, 'Region']):

                if (Stair_0RealBCD.loc[l, 'F.ID_X'] == Stair_12TestBCD.loc[k, 'F.ID_X']) & (Stair_0RealBCD.loc[l, 'F.ID_Y'] == Stair_12TestBCD.loc[k, 'F.ID_Y']):

                    zoom48.append(Stair_12TestBCD.BotCD[k])





Stair_0RealBCD["Edge_1314"] = zoom48





Zones_12= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom49 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_12)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom49.append(SPEC2.iat[1,j])





#Adding the Positive SPEC Values

zoom511 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_1)):

        if Stair_0RealBCD.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom511.append(SPEC21.iat[1,j])



zoom50 = []

for k in range (len(Stair_0RealBCD)):

    for j in range(len(Zones_12)):

        if Stair_0RealBCD.loc[k, 'Zones'] == EDGE2.iat[0,j] :

           zoom50.append(EDGE2.iat[1,j])



Stair_0RealBCD["SPEC_12"] = zoom49

Stair_0RealBCD["SPEC_EDGE_12"] = zoom50

Stair_0RealBCD["SPEC_12Positive"] = zoom511







Stair_0RealBCD["CumError_12"] = (Stair_0RealBCD.BotCD + Stair_0RealBCD.Edge_23 + Stair_0RealBCD.Edge_34 +

Stair_0RealBCD.Edge_45 + Stair_0RealBCD.Edge_56 + Stair_0RealBCD.Edge_67 + Stair_0RealBCD.Edge_78 + Stair_0RealBCD.Edge_89 + Stair_0RealBCD.Edge_910 + Stair_0RealBCD.Edge_1011 + Stair_0RealBCD.Edge_1112 + Stair_0RealBCD.Edge_1213 + Stair_0RealBCD.Edge_1314) - Stair_0RealBCD.SPEC_EDGE_12





for k in range(len(Stair_0RealBCD)):

    if Stair_0RealBCD.loc[k, 'CumError_12'] < 0:

           Stair_0RealBCD["Abs_CumSPEC_12"] = abs(Stair_0RealBCD["CumError_12"]) - Stair_0RealBCD.SPEC_12

    elif Stair_0RealBCD.loc[k, 'CumError_12'] >= 0:

        Stair_0RealBCD["Abs_CumSPEC_12"] = abs(Stair_0RealBCD["CumError_12"]) - Stair_0RealBCD.SPEC_12Positive





#Pre-graph plot data massaging and Filtering to remove extreme fliers and thus ensure graphs are as neat as they should be



zoom51= ("Abs_CumSPEC","Abs_CumSPEC_1","Abs_CumSPEC_2","Abs_CumSPEC_3","Abs_CumSPEC_4","Abs_CumSPEC_5", "Abs_CumSPEC_6", "Abs_CumSPEC_7", "Abs_CumSPEC_8", "Abs_CumSPEC_9", "Abs_CumSPEC_10", "Abs_CumSPEC_11", "Abs_CumSPEC_12")

Deletable= []

for Abs_SPEC in zoom51:

    for Abs in list(Stair_0RealBCD.columns):

        if Abs_SPEC == Abs:

            for p in range(len(Stair_0RealBCD)):

                if Stair_0RealBCD.loc[p, Abs] > 2500:

                    Deletable.append(Stair_0RealBCD.index[p])


Stairs_0Real2BCD = Stair_0RealBCD.drop(Stair_0RealBCD.index[Deletable])

Stairs_0Real2BCD = Stairs_0Real2BCD.reset_index(drop=True)









#########################################################################################################

####################### This is for the Region E direct measurement and analysis ########################

#########################################################################################################

#########################################################################################################

####################### This is for the Region E direct measurement and analysis ########################

#########################################################################################################





#Subseting the dataset to have regions A, regions BCD and regions E

Stair_0TestE = Stair_0Test[(Stair_0Test.Region == "E")]

Kenny_TrueE = Ken[(Ken.Region == "E")]





Stair_0TestE = Stair_0TestE.reset_index(drop=True)

Kenny_TrueE = Kenny_TrueE.reset_index(drop=True)



list5 = ("TOPZ1T0", "TOPZ2T0", "TOPZ3T0", "TOPZ4T0", "TOPZ5T0", "TOPZ6T0", "TOPZ7T0", "TOPZ8T0")



list7 = []

for ii in range(len(Stair_0TestE)):

    for jj in range(len(list5)):

            if Stair_0TestE.F_Tag_Bottom[ii] == list5[jj]:

                list7.append(Stair_0TestE.index[ii])



Stair_0RealE= Stair_0TestE[Stair_0TestE.index.isin(list7)]



Stair_0RealE = Stair_0RealE.reset_index(drop=True)



list8= ("TOPZ1T0", "TOPZ3T0", "TOPZ4T0", "TOPZ8T0", "TOPZ7T0", "TOPZ5T0", "TOPZ6T0", "TOPZ2T0")

list9 =("Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2")

zoom = []

for k in range (len(Stair_0RealE)):

    for j in range(len(list8)):

        if Stair_0RealE.loc[k, 'F_Tag_Bottom'] == list8[j]:

           zoom.append(list9[j])





Stair_0RealE["Zones"] = zoom

# All-Stair Cum SPEC and Cum Edges

## Negative SPEC



SPEC_0 = [1849,1828,1785,1046,1250,951,1095,1736]

SPEC_1 = [950,1400,1300,2750,1600,900,1000,950]

SPEC_2 = [1000,1200,1150,3000,1300,800,1200,1000]

SPEC_3 = [1200,1115,1300,3250,1300,875,1115,1200]

SPEC_4 = [1375,1500,1600,3250,1250,1250,1250,1375]

SPEC_5 = [1500,1600,1750,3100,1300,1250,1400,1500]

SPEC_6 = [1750,1900,2000,3100,1750,1600,1500,1750]

SPEC_7 = [2000,2100,2250,3100,1600,1600,1750,2250]

SPEC_8 = [1750,2000,2000,2750,1500,1750,1600,1800]

SPEC_9 = [1800,2100,2100,2750,1900,2000,1750,2250]

SPEC_10 = [2000,2100,2350,2500,2000,2000,1700,1800]

SPEC_11 = [1800,2100,2050,2600,2150,2000,1700,1800]

SPEC_12 = [1800,2600,2300,3000,1800,2471,2000,1800]











import numpy as np

SPEC = [Zones, SPEC_12, SPEC_11, SPEC_10, SPEC_9, SPEC_8, SPEC_7, SPEC_6, SPEC_5, SPEC_4, SPEC_3, SPEC_2, SPEC_1, SPEC_0]



import pandas as pd

SPEC2 = pd.DataFrame(SPEC, index= Index_Names, columns= Zones)



#Positive SPEC



Zones1= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]



SPEC_01 = [1849,1828,1785,1046,1400,951,1095,1736]

SPEC_11 = [1200,1700,1100,1400,1600,1125,1200,1000]

SPEC_21 = [1100,1500,1400,1400,1600,1000,1200,1050]

SPEC_31 = [1200,1450,1300,1500,1600,1000,1115,1200]

SPEC_41 = [1350,1600,1500,1600,1300,1000,1216,1400]

SPEC_51 = [1500,1700,1600,1350,1500,1000,1000,1500]

SPEC_61 = [1600,1800,1800,1500,1600,1000,1200,1600]

SPEC_71 = [1600,2000,1750,1500,1650,1000,1000,1750]

SPEC_81 = [2400,2600,2500,2000,2100,1200,1000,2500]

SPEC_91 = [2550,2800,2600,2200,2200,1200,1100,2750]

SPEC_101 = [2900,3500,3200,2500,2500,1500,1600,3000]

SPEC_111 = [3000,3500,3200,2700,2700,1600,1700,3000]

SPEC_121 = [3400,3400,3400,2800,2900,1800,1800,3500]











import numpy as np

SPEC1 = [Zones1, SPEC_121, SPEC_111, SPEC_101, SPEC_91, SPEC_81, SPEC_71, SPEC_61, SPEC_51, SPEC_41, SPEC_31, SPEC_21, SPEC_11, SPEC_01]



import pandas as pd

SPEC21 = pd.DataFrame(SPEC1, index= Index_Names, columns= Zones)





Edge_0 = [30699.23,32659.9,31905.04,24850.09,25247.99,22758.6,22609.63,30130.3]

Edge_1 = [37396.88,39279.21,38452.26,30322.56,30575.07,28075.11,28327.05,36595.42]

Edge_2 = [43409.73,45186.58,44363.54,35844.79,36090.31,33614.24,33847.37,42395.39]

Edge_3 = [49137.39,50913.2,50204.68,41115.69,41486.21,39011.7,39137.81,48114.91]

Edge_4 = [54891.01,56713.57,56159.17,46295.45,46846.81,44404.54,44307.55,54180.86]

Edge_5 = [61055.72,62964.27,62529.53,51605.78,52316.95,49897.04,49623.29,60618.46]

Edge_6 = [67574.14,69565.81,69159.23,57072.37,57924.29,55535.59,55089.28,67408.94]

Edge_7 = [74199.99,76219.01,75891.41,62473.91,63550.94,61179.42,60515.12,74245.32]

Edge_8 = [80557.73,82613.94,82350.52,67703.21,69023.01,66628.34,65702.82,80794.54]

Edge_9 = [87344.11,89291.87,89096.12,73525.47,75000.02,72646.64,71525.62,87731.82]

Edge_10 = [93909.51,95903.19,95794.47,79266.8,80852.51,78514.98,77279.8,94358.22]

Edge_11 = [100335.9,102247.6,102203.8,85204.91,86805.85,84521.7,83200.05,100850]

Edge_12 = [106887.2,108857.2,108747.9,91435.17,93115.77,90823.32,89471.99,107364.7]





EDGE = [Zones,Edge_12, Edge_11, Edge_10, Edge_9, Edge_8, Edge_7, Edge_6, Edge_5, Edge_4, Edge_3, Edge_2, Edge_1, Edge_0]



EDGE2 = pd.DataFrame(EDGE, index= Index_Names, columns= Zones)



zoom1 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom1.append(SPEC2.iat[13,j])





zoom2 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom2.append(EDGE2.iat[13,j])





zoom1000 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom1000.append(SPEC21.iat[13,j])





Stair_0RealE["SPEC_0"] = zoom1

Stair_0RealE["SPEC_EDGE_0"] = zoom2

Stair_0RealE["SPECPositive"] = zoom1000



Stair_0RealE["CumError"] = Stair_0RealE.BotCD - Stair_0RealE.SPEC_EDGE_0





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError'] < 0:

        Stair_0RealE["Abs_CumSPEC"] = abs(Stair_0RealE["CumError"]) - Stair_0RealE.SPEC_0

    elif Stair_0RealE.loc[k, 'CumError'] >= 0:

        Stair_0RealE["Abs_CumSPEC"] = abs(Stair_0RealE["CumError"]) - Stair_0RealE.SPECPositive





#Evaluation of Edge 2,3

#Stair Row 1 Evaluation

Stair_1TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "2,3-TOPZ1T1") | (Kenny_TrueE.edges == "2,3-TOPZ2T1") | (Kenny_TrueE.edges == "2,3-TOPZ3T1") | (Kenny_TrueE.edges == "2,3-TOPZ4T1") | (Kenny_TrueE.edges == "2,3-TOPZ5T1") | (Kenny_TrueE.edges == "2,3-TOPZ6T1") | (Kenny_TrueE.edges == "2,3-TOPZ7T1") | (Kenny_TrueE.edges == "2,3-TOPZ8T1"))]

Stair_1TestE = Stair_1TestE.reset_index(drop=True)





zoom3 = []

for k in range (len(Stair_1TestE)):

    if (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ1T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone1')

    elif (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ2T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone2')

    elif (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ3T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone3')

    elif (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ4T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom3.append('Zone4')

    elif (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ5T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone5')

    elif (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ6T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone6')

    elif (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ7T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone7')

    elif (Stair_1TestE.loc[k, 'edges'] == "2,3-TOPZ8T1") & (Stair_1TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom3.append('Zone8')



Stair_1TestE["Zones"] = zoom3

zoom4 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_1TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_1TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_1TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_1TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_1TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_1TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_1TestE.loc[k, 'F.ID_Y']):

                    zoom4.append(Stair_1TestE.BotCD[k])









Stair_0RealE["Edge_23"] = zoom4





Zones_1= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom5 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom5.append(SPEC2.iat[12,j])





#Adding the Positive SPEC Values

zoom500 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom500.append(SPEC21.iat[12,j])



zoom6 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom6.append(EDGE2.iat[12,j])



Stair_0RealE["SPEC_1"] = zoom5

Stair_0RealE["SPEC_EDGE_1"] = zoom6

Stair_0RealE["SPEC_1Positive"] = zoom500



Stair_0RealE["CumError_1"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23) - Stair_0RealE.SPEC_EDGE_1







for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_1'] < 0:

        Stair_0RealE["Abs_CumSPEC_1"] = abs(Stair_0RealE["CumError_1"]) - Stair_0RealE.SPEC_1

    elif Stair_0RealE.loc[k, 'CumError_1'] >= 0:

        Stair_0RealE["Abs_CumSPEC_1"] = abs(Stair_0RealE["CumError_1"]) - Stair_0RealE.SPEC_1Positive





#Evaluation of Edge 3,4

#Stair Row 2 Evaluation



Stair_2TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "3,4-TOPZ1T2") | (Kenny_TrueE.edges == "3,4-TOPZ2T2") | (Kenny_TrueE.edges == "3,4-TOPZ3T2") | (Kenny_TrueE.edges == "3,4-TOPZ4T2") | (Kenny_TrueE.edges == "3,4-TOPZ5T2") | (Kenny_TrueE.edges == "3,4-TOPZ6T2") | (Kenny_TrueE.edges == "3,4-TOPZ7T2") | (Kenny_TrueE.edges == "3,4-TOPZ8T2"))]

Stair_2TestE = Stair_2TestE.reset_index(drop=True)

zoom7 = []

for k in range (len(Stair_2TestE)):

    if (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ1T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone1')

    elif (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ2T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone2')

    elif (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ3T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone3')

    elif (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ4T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom7.append('Zone4')

    elif (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ5T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone5')

    elif (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ6T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone6')

    elif (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ7T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone7')

    elif (Stair_2TestE.loc[k, 'edges'] == "3,4-TOPZ8T2") & (Stair_2TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom7.append('Zone8')





Stair_2TestE["Zones"] = zoom7

zoom8 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_2TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_2TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_2TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_2TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_2TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_2TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_2TestE.loc[k, 'F.ID_Y']):

                    zoom8.append(Stair_2TestE.BotCD[k])





Stair_0RealE["Edge_34"] = zoom8





Zones_2= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom9 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_2)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

           zoom9.append(SPEC2.iat[11,j])





#Adding the Positive SPEC Values

zoom501 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom501.append(SPEC21.iat[11,j])





zoom10 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_2)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom10.append(EDGE2.iat[11,j])



Stair_0RealE["SPEC_2"] = zoom9

Stair_0RealE["SPEC_EDGE_2"] = zoom10

Stair_0RealE["SPEC_2Positive"] = zoom501







Stair_0RealE["CumError_2"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34) - Stair_0RealE.SPEC_EDGE_2



for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_2'] < 0:

        Stair_0RealE["Abs_CumSPEC_2"] = abs(Stair_0RealE["CumError_2"]) - Stair_0RealE.SPEC_2

    elif Stair_0RealE.loc[k, 'CumError_2'] >= 0:

        Stair_0RealE["Abs_CumSPEC_2"] = abs(Stair_0RealE["CumError_2"]) - Stair_0RealE.SPEC_2Positive







#Evaluation of Edge 4,5

#Stair Row 3 Evaluation

Stair_3TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "4,5-TOPZ1T3") | (Kenny_TrueE.edges == "4,5-TOPZ2T3") | (Kenny_TrueE.edges == "4,5-TOPZ3T3") | (Kenny_TrueE.edges == "4,5-TOPZ4T3") | (Kenny_TrueE.edges == "4,5-TOPZ5T3") | (Kenny_TrueE.edges == "4,5-TOPZ6T3") | (Kenny_TrueE.edges == "4,5-TOPZ7T3") | (Kenny_TrueE.edges == "4,5-TOPZ8T3"))]

Stair_3TestE = Stair_3TestE.reset_index(drop=True)

zoom11 = []

for k in range (len(Stair_3TestE)):

    if (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ1T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone1')

    elif (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ2T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone2')

    elif (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ3T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone3')

    elif (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ4T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom11.append('Zone4')

    elif (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ5T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone5')

    elif (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ6T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone6')

    elif (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ7T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone7')

    elif (Stair_3TestE.loc[k, 'edges'] == "4,5-TOPZ8T3") & (Stair_3TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom11.append('Zone8')



Stair_3TestE["Zones"] = zoom11

zoom12 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_3TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_3TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_3TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_3TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_3TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_3TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_3TestE.loc[k, 'F.ID_Y']):

                    zoom12.append(Stair_3TestE.BotCD[k])





Stair_0RealE["Edge_45"] = zoom12





Zones_3= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom13 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_3)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom13.append(SPEC2.iat[10,j])





#Adding the Positive SPEC Values

zoom502 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom502.append(SPEC21.iat[10,j])





zoom14 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_3)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom14.append(EDGE2.iat[10,j])



Stair_0RealE["SPEC_3"] = zoom13

Stair_0RealE["SPEC_EDGE_3"] = zoom14

Stair_0RealE["SPEC_3Positive"] = zoom502







Stair_0RealE["CumError_3"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 ) - Stair_0RealE.SPEC_EDGE_3





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_3'] < 0:

        Stair_0RealE["Abs_CumSPEC_3"] = abs(Stair_0RealE["CumError_3"]) - Stair_0RealE.SPEC_3

    elif Stair_0RealE.loc[k, 'CumError_3'] >= 0:

        Stair_0RealE["Abs_CumSPEC_3"] = abs(Stair_0RealE["CumError_3"]) - Stair_0RealE.SPEC_3Positive







#Evaluation of Edge 5,6

#Stair Row 4 Evaluation

Stair_4TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "5,6-TOPZ1T4") | (Kenny_TrueE.edges == "5,6-TOPZ2T4") | (Kenny_TrueE.edges == "5,6-TOPZ3T4") | (Kenny_TrueE.edges == "5,6-TOPZ4T4") | (Kenny_TrueE.edges == "5,6-TOPZ5T4") | (Kenny_TrueE.edges == "5,6-TOPZ6T4") | (Kenny_TrueE.edges == "5,6-TOPZ7T4") | (Kenny_TrueE.edges == "5,6-TOPZ8T4"))]

Stair_4TestE = Stair_4TestE.reset_index(drop=True)

zoom15 = []

for k in range (len(Stair_4TestE)):

    if (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ1T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone1')

    elif (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ2T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone2')

    elif (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ3T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone3')

    elif (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ4T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom15.append('Zone4')

    elif (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ5T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone5')

    elif (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ6T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone6')

    elif (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ7T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone7')

    elif (Stair_4TestE.loc[k, 'edges'] == "5,6-TOPZ8T4") & (Stair_4TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom15.append('Zone8')



Stair_4TestE["Zones"] = zoom15

zoom16 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_4TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_4TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_4TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_4TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_4TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_4TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_4TestE.loc[k, 'F.ID_Y']):

                    zoom16.append(Stair_4TestE.BotCD[k])





Stair_0RealE["Edge_56"] = zoom16





Zones_4= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom17 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_4)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom17.append(SPEC2.iat[9,j])





#Adding the Positive SPEC Values

zoom503 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom503.append(SPEC21.iat[9,j])







zoom18 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_4)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom18.append(EDGE2.iat[9,j])



Stair_0RealE["SPEC_4"] = zoom17

Stair_0RealE["SPEC_EDGE_4"] = zoom18

Stair_0RealE["SPEC_4Positive"] = zoom503







Stair_0RealE["CumError_4"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 ) - Stair_0RealE.SPEC_EDGE_4





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_4'] < 0:

        Stair_0RealE["Abs_CumSPEC_4"] = abs(Stair_0RealE["CumError_4"]) - Stair_0RealE.SPEC_4

    elif Stair_0RealE.loc[k, 'CumError_4'] >= 0:

        Stair_0RealE["Abs_CumSPEC_4"] = abs(Stair_0RealE["CumError_4"]) - Stair_0RealE.SPEC_4Positive





#Evaluation of Edge 6,7

#Stair Row 5 Evaluation

Stair_5TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "6,7-TOPZ1T5") | (Kenny_TrueE.edges == "6,7-TOPZ2T5") | (Kenny_TrueE.edges == "6,7-TOPZ3T5") | (Kenny_TrueE.edges == "6,7-TOPZ4T5") | (Kenny_TrueE.edges == "6,7-TOPZ5T5") | (Kenny_TrueE.edges == "6,7-TOPZ6T5") | (Kenny_TrueE.edges == "6,7-TOPZ7T5") | (Kenny_TrueE.edges == "6,7-TOPZ8T5"))]

Stair_5TestE = Stair_5TestE.reset_index(drop=True)

zoom19 = []

for k in range (len(Stair_5TestE)):

    if (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ1T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone1')

    elif (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ2T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone2')

    elif (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ3T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone3')

    elif (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ4T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom19.append('Zone4')

    elif (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ5T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone5')

    elif (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ6T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone6')

    elif (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ7T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone7')

    elif (Stair_5TestE.loc[k, 'edges'] == "6,7-TOPZ8T5") & (Stair_5TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom19.append('Zone8')

Stair_5TestE["Zones"] = zoom19

zoom20 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_5TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_5TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_5TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_5TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_5TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_5TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_5TestE.loc[k, 'F.ID_Y']):

                    zoom20.append(Stair_5TestE.BotCD[k])





Stair_0RealE["Edge_67"] = zoom20





Zones_5= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom21 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_5)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom21.append(SPEC2.iat[8,j])







#Adding the Positive SPEC Values

zoom504 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom504.append(SPEC21.iat[8,j])





zoom22 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_5)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom22.append(EDGE2.iat[8,j])



Stair_0RealE["SPEC_5"] = zoom21

Stair_0RealE["SPEC_EDGE_5"] = zoom22

Stair_0RealE["SPEC_5Positive"] = zoom504



Stair_0RealE["CumError_5"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 ) - Stair_0RealE.SPEC_EDGE_5





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_5'] < 0:

        Stair_0RealE["Abs_CumSPEC_5"] = abs(Stair_0RealE["CumError_5"]) - Stair_0RealE.SPEC_5

    elif Stair_0RealE.loc[k, 'CumError_5'] >= 0:

        Stair_0RealE["Abs_CumSPEC_5"] = abs(Stair_0RealE["CumError_5"]) - Stair_0RealE.SPEC_5Positive





#Evaluation of Edge 7,8

#Stair Row 5 Evaluation

Stair_6TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "7,8-Z01-T06") | (Kenny_TrueE.edges == "7,8-Z02-T06") | (Kenny_TrueE.edges == "7,8-Z03-T06") | (Kenny_TrueE.edges == "7,8-Z04-T06") | (Kenny_TrueE.edges == "7,8-Z05-T06") | (Kenny_TrueE.edges == "7,8-Z06-T06") | (Kenny_TrueE.edges == "7,8-Z07-T06") | (Kenny_TrueE.edges == "7,8-Z08-T06"))]

Stair_6TestE = Stair_6TestE.reset_index(drop=True)

zoom23 = []

for k in range (len(Stair_6TestE)):

    if (Stair_6TestE.loc[k, 'edges'] == "7,8-Z01-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone1')

    elif (Stair_6TestE.loc[k, 'edges'] == "7,8-Z02-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone2')

    elif (Stair_6TestE.loc[k, 'edges'] == "7,8-Z03-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone3')

    elif (Stair_6TestE.loc[k, 'edges'] == "7,8-Z04-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom23.append('Zone4')

    elif (Stair_6TestE.loc[k, 'edges'] == "7,8-Z05-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone5')

    elif (Stair_6TestE.loc[k, 'edges'] == "7,8-Z06-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone6')

    elif (Stair_6TestE.loc[k, 'edges'] == "7,8-Z07-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone7')

    elif (Stair_6TestE.loc[k, 'edges'] == "7,8-Z08-T06") & (Stair_6TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom23.append('Zone8')



Stair_6TestE["Zones"] = zoom23





zoom24 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_6TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_6TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_6TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_6TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_6TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_6TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_6TestE.loc[k, 'F.ID_Y']):

                    zoom24.append(Stair_6TestE.BotCD[k])





Stair_0RealE["Edge_78"] = zoom24





Zones_6= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom25 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_6)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom25.append(SPEC2.iat[7,j])





#Adding the Positive SPEC Values

zoom505 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom505.append(SPEC21.iat[7,j])





zoom26 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_6)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom26.append(EDGE2.iat[7,j])



Stair_0RealE["SPEC_6"] = zoom25

Stair_0RealE["SPEC_EDGE_6"] = zoom26

Stair_0RealE["SPEC_6Positive"] = zoom505





Stair_0RealE["CumError_6"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 + Stair_0RealE.Edge_78) - Stair_0RealE.SPEC_EDGE_6



for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_6'] < 0:

           Stair_0RealE["Abs_CumSPEC_6"] = abs(Stair_0RealE["CumError_6"]) - Stair_0RealE.SPEC_6

    elif Stair_0RealE.loc[k, 'CumError_6'] >= 0:

        Stair_0RealE["Abs_CumSPEC_6"] = abs(Stair_0RealE["CumError_6"]) - Stair_0RealE.SPEC_6Positive







#Evaluation of Edge 8,9

#Stair Row 6 Evaluation

Stair_7TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "8,9-TOPZ1T7") | (Kenny_TrueE.edges == "8,9-TOPZ2T7") | (Kenny_TrueE.edges == "8,9-TOPZ3T7") | (Kenny_TrueE.edges == "8,9-TOPZ4T7") | (Kenny_TrueE.edges == "8,9-TOPZ5T7") | (Kenny_TrueE.edges == "8,9-TOPZ6T7") | (Kenny_TrueE.edges == "8,9-TOPZ7T7") | (Kenny_TrueE.edges == "8,9-TOPZ8T7"))]

Stair_7TestE = Stair_7TestE.reset_index(drop=True)

zoom27 = []

for k in range (len(Stair_7TestE)):

    if (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ1T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone1')

    elif (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ2T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone2')

    elif (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ3T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone3')

    elif (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ4T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom27.append('Zone4')

    elif (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ5T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone5')

    elif (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ6T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone6')

    elif (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ7T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone7')

    elif (Stair_7TestE.loc[k, 'edges'] == "8,9-TOPZ8T7") & (Stair_7TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom27.append('Zone8')

Stair_7TestE["Zones"] = zoom27





zoom28 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_7TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_7TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_7TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_7TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_7TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_7TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_7TestE.loc[k, 'F.ID_Y']):

                    zoom28.append(Stair_7TestE.BotCD[k])





Stair_0RealE["Edge_89"] = zoom28





Zones_7= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom29 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_7)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom29.append(SPEC2.iat[6,j])





#Adding the Positive SPEC Values

zoom506 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom506.append(SPEC21.iat[6,j])



zoom30 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_7)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom30.append(EDGE2.iat[6,j])



Stair_0RealE["SPEC_7"] = zoom29

Stair_0RealE["SPEC_EDGE_7"] = zoom30

Stair_0RealE["SPEC_7Positive"] = zoom506







Stair_0RealE["CumError_7"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 + Stair_0RealE.Edge_78 + Stair_0RealE.Edge_89) - Stair_0RealE.SPEC_EDGE_7



for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_7'] < 0:

        Stair_0RealE["Abs_CumSPEC_7"] = abs(Stair_0RealE["CumError_7"]) - Stair_0RealE.SPEC_7

    elif Stair_0RealE.loc[k, 'CumError_7'] >= 0:

        Stair_0RealE["Abs_CumSPEC_7"] = abs(Stair_0RealE["CumError_7"]) - Stair_0RealE.SPEC_7Positive





#Evaluation of Edge 9,10

#Stair Row 7 Evaluation

Stair_8TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "9,10-TOPZ1T8") | (Kenny_TrueE.edges == "9,10-TOPZ2T8") | (Kenny_TrueE.edges == "9,10-TOPZ3T8") | (Kenny_TrueE.edges == "9,10-TOPZ4T8") | (Kenny_TrueE.edges == "9,10-TOPZ5T8") | (Kenny_TrueE.edges == "9,10-TOPZ6T8") | (Kenny_TrueE.edges == "9,10-TOPZ7T8") | (Kenny_TrueE.edges == "9,10-TOPZ8T8"))]

Stair_8TestE = Stair_8TestE.reset_index(drop=True)

zoom31 = []

for k in range (len(Stair_8TestE)):

    if (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ1T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone1')

    elif (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ2T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone2')

    elif (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ3T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone3')

    elif (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ4T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom31.append('Zone4')

    elif (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ5T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone5')

    elif (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ6T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone6')

    elif (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ7T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone7')

    elif (Stair_8TestE.loc[k, 'edges'] == "9,10-TOPZ8T8") & (Stair_8TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom31.append('Zone8')



Stair_8TestE["Zones"] = zoom31





zoom32 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_8TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_8TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_8TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_8TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_8TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_8TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_8TestE.loc[k, 'F.ID_Y']):

                    zoom32.append(Stair_8TestE.BotCD[k])





Stair_0RealE["Edge_910"] = zoom32





Zones_8= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom33 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_8)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom33.append(SPEC2.iat[5,j])







#Adding the Positive SPEC Values

zoom507 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom507.append(SPEC21.iat[5,j])





zoom34 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_8)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom34.append(EDGE2.iat[5,j])



Stair_0RealE["SPEC_8"] = zoom33

Stair_0RealE["SPEC_EDGE_8"] = zoom34

Stair_0RealE["SPEC_8Positive"] = zoom507





Stair_0RealE["CumError_8"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 + Stair_0RealE.Edge_78 + Stair_0RealE.Edge_89 + Stair_0RealE.Edge_910) - Stair_0RealE.SPEC_EDGE_8





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_8'] < 0:

           Stair_0RealE["Abs_CumSPEC_8"] = abs(Stair_0RealE["CumError_8"]) - Stair_0RealE.SPEC_8

    elif Stair_0RealE.loc[k, 'CumError_8'] >= 0:

        Stair_0RealE["Abs_CumSPEC_8"] = abs(Stair_0RealE["CumError_8"]) - Stair_0RealE.SPEC_8Positive







#Evaluation of Edge 10,11

#Stair Row 8 Evaluation

Stair_9TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "10,11-TOPZ1T9") | (Kenny_TrueE.edges == "10,11-TOPZ2T9") | (Kenny_TrueE.edges == "10,11-TOPZ3T9") | (Kenny_TrueE.edges == "10,11-TOPZ4T9") | (Kenny_TrueE.edges == "10,11-TOPZ5T9") | (Kenny_TrueE.edges == "10,11-TOPZ6T9") | (Kenny_TrueE.edges == "10,11-TOPZ7T9") | (Kenny_TrueE.edges == "10,11-TOPZ8T9"))]

Stair_9TestE = Stair_9TestE.reset_index(drop=True)

zoom35 = []

for k in range (len(Stair_9TestE)):

    if (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ1T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone1')

    elif (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ2T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone2')

    elif (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ3T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone3')

    elif (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ4T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom35.append('Zone4')

    elif (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ5T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone5')

    elif (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ6T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone6')

    elif (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ7T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone7')

    elif (Stair_9TestE.loc[k, 'edges'] == "10,11-TOPZ8T9") & (Stair_9TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom35.append('Zone8')





Stair_9TestE["Zones"] = zoom35







zoom36 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_9TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_9TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_9TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_9TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_9TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_9TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_9TestE.loc[k, 'F.ID_Y']):

                    zoom36.append(Stair_9TestE.BotCD[k])





Stair_0RealE["Edge_1011"] = zoom36





Zones_9= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom37 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_9)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom37.append(SPEC2.iat[4,j])





#Adding the Positive SPEC Values

zoom508 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom508.append(SPEC21.iat[4,j])



zoom38 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_9)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom38.append(EDGE2.iat[4,j])



Stair_0RealE["SPEC_9"] = zoom37

Stair_0RealE["SPEC_EDGE_9"] = zoom38

Stair_0RealE["SPEC_9Positive"] = zoom508





Stair_0RealE["CumError_9"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 + Stair_0RealE.Edge_78 + Stair_0RealE.Edge_89 + Stair_0RealE.Edge_910 + Stair_0RealE.Edge_1011) - Stair_0RealE.SPEC_EDGE_9



for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_9'] < 0:

           Stair_0RealE["Abs_CumSPEC_9"] = abs(Stair_0RealE["CumError_9"]) - Stair_0RealE.SPEC_9

    elif Stair_0RealE.loc[k, 'CumError_9'] >= 0:

        Stair_0RealE["Abs_CumSPEC_9"] = abs(Stair_0RealE["CumError_9"]) - Stair_0RealE.SPEC_9Positive





#Evaluation of Edge 11,12

#Stair Row 9 Evaluation

Stair_10TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "11,12-TOPZ1T10") | (Kenny_TrueE.edges == "11,12-TOPZ2T10") | (Kenny_TrueE.edges == "11,12-TOPZ3T10") | (Kenny_TrueE.edges == "11,12-TOPZ4T10") | (Kenny_TrueE.edges == "11,12-TOPZ5T10") | (Kenny_TrueE.edges == "11,12-TOPZ6T10") | (Kenny_TrueE.edges == "11,12-TOPZ7T10") | (Kenny_TrueE.edges == "11,12-TOPZ8T10"))]

Stair_10TestE = Stair_10TestE.reset_index(drop=True)

zoom39 = []

for k in range (len(Stair_10TestE)):

    if (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ1T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone1')

    elif (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ2T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone2')

    elif (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ3T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone3')

    elif (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ4T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom39.append('Zone4')

    elif (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ5T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone5')

    elif (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ6T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone6')

    elif (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ7T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone7')

    elif (Stair_10TestE.loc[k, 'edges'] == "11,12-TOPZ8T10") & (Stair_10TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom39.append('Zone8')



Stair_10TestE["Zones"] = zoom39





zoom40 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_10TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_10TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_10TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_10TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_10TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_10TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_10TestE.loc[k, 'F.ID_Y']):

                    zoom40.append(Stair_10TestE.BotCD[k])





Stair_0RealE["Edge_1112"] = zoom40





Zones_10= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom41 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_10)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom41.append(SPEC2.iat[3,j])





#Adding the Positive SPEC Values

zoom509 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom509.append(SPEC21.iat[3,j])





zoom42 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_10)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom42.append(EDGE2.iat[3,j])



Stair_0RealE["SPEC_10"] = zoom41

Stair_0RealE["SPEC_EDGE_10"] = zoom42

Stair_0RealE["SPEC_10Positive"] = zoom509







Stair_0RealE["CumError_10"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 + Stair_0RealE.Edge_78 + Stair_0RealE.Edge_89 + Stair_0RealE.Edge_910 + Stair_0RealE.Edge_1011 + Stair_0RealE.Edge_1112) - Stair_0RealE.SPEC_EDGE_10





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_10'] < 0:

        Stair_0RealE["Abs_CumSPEC_10"] = abs(Stair_0RealE["CumError_10"]) - Stair_0RealE.SPEC_10

    elif Stair_0RealE.loc[k, 'CumError_10'] >= 0:

        Stair_0RealE["Abs_CumSPEC_10"] = abs(Stair_0RealE["CumError_10"]) - Stair_0RealE.SPEC_10Positive







#Evaluation of Edge 12,13

#Stair Row 10 Evaluation

Stair_11TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "12,13-TOPZ1T11") | (Kenny_TrueE.edges == "12,13-TOPZ2T11") | (Kenny_TrueE.edges == "12,13-TOPZ3T11") | (Kenny_TrueE.edges == "12,13-TOPZ4T11") | (Kenny_TrueE.edges == "12,13-TOPZ5T11") | (Kenny_TrueE.edges == "12,13-TOPZ6T11") | (Kenny_TrueE.edges == "12,13-TOPZ7T11") | (Kenny_TrueE.edges == "12,13-TOPZ8T11"))]

Stair_11TestE = Stair_11TestE.reset_index(drop=True)

zoom43 = []

for k in range (len(Stair_11TestE)):

    if (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ1T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone1')

    elif (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ2T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone2')

    elif (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ3T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone3')

    elif (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ4T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom43.append('Zone4')

    elif (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ5T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone5')

    elif (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ6T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone6')

    elif (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ7T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone7')

    elif (Stair_11TestE.loc[k, 'edges'] == "12,13-TOPZ8T11") & (Stair_11TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom43.append('Zone8')





Stair_11TestE["Zones"] = zoom43





zoom44 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_11TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_11TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_11TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_11TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_11TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_11TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_11TestE.loc[k, 'F.ID_Y']):

                    zoom44.append(Stair_11TestE.BotCD[k])





Stair_0RealE["Edge_1213"] = zoom44





Zones_11= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom45 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_11)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom45.append(SPEC2.iat[2,j])







#Adding the Positive SPEC Values

zoom510 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom510.append(SPEC21.iat[2,j])







zoom46 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_11)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom46.append(EDGE2.iat[2,j])



Stair_0RealE["SPEC_11"] = zoom45

Stair_0RealE["SPEC_EDGE_11"] = zoom46

Stair_0RealE["SPEC_11Positive"] = zoom510



Stair_0RealE["CumError_11"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 + Stair_0RealE.Edge_78 + Stair_0RealE.Edge_89 + Stair_0RealE.Edge_910 + Stair_0RealE.Edge_1011 + Stair_0RealE.Edge_1112 + Stair_0RealE.Edge_1213) - Stair_0RealE.SPEC_EDGE_11





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_11'] < 0:

        Stair_0RealE["Abs_CumSPEC_11"] = abs(Stair_0RealE["CumError_11"]) - Stair_0RealE.SPEC_11

    elif Stair_0RealE.loc[k, 'CumError_11'] >= 0:

        Stair_0RealE["Abs_CumSPEC_11"] = abs(Stair_0RealE["CumError_11"]) - Stair_0RealE.SPEC_11Positive







#Evaluation of Edge 13,14

#Stair Row 11 Evaluation

Stair_12TestE = Kenny_TrueE[((Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7a_TOP") | (Kenny_TrueE.Target_Name == "B27A_57ACI_1PBRevb7b_TOP"))  & ((Kenny_TrueE.edges == "13,14-TOPZ1T12") | (Kenny_TrueE.edges == "13,14-TOPZ2T12") | (Kenny_TrueE.edges == "13,14-TOPZ3T12") | (Kenny_TrueE.edges == "13,14-TOPZ4T12") | (Kenny_TrueE.edges == "13,14-TOPZ5T12") | (Kenny_TrueE.edges == "13,14-TOPZ6T12") | (Kenny_TrueE.edges == "13,14-TOPZ7T12") | (Kenny_TrueE.edges == "13,14-TOPZ8T12"))]

Stair_12TestE = Stair_12TestE.reset_index(drop=True)

zoom47 = []

for k in range (len(Stair_12TestE)):

    if (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ1T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone1')

    elif (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ2T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone2')

    elif (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ3T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone3')

    elif (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ4T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7a_TOP") :

            zoom47.append('Zone4')

    elif (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ5T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone5')

    elif (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ6T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone6')

    elif (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ7T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone7')

    elif (Stair_12TestE.loc[k, 'edges'] == "13,14-TOPZ8T12") & (Stair_12TestE.loc[k, 'Target_Name'] == "B27A_57ACI_1PBRevb7b_TOP") :

            zoom47.append('Zone8')



Stair_12TestE["Zones"] = zoom47





zoom48 = []



for l in range(len(Stair_0RealE)):

    for k in range(len(Stair_12TestE)):

        if (Stair_0RealE.loc[l, 'Lot'] == Stair_12TestE.loc[k, 'Lot']) & (Stair_0RealE.loc[l, 'Wafer'] == Stair_12TestE.loc[k, 'Wafer']):

            if (Stair_0RealE.loc[l, 'Zones'] == Stair_12TestE.loc[k, 'Zones']) & (Stair_0RealE.loc[l, 'Region'] == Stair_12TestE.loc[k, 'Region']):

                if (Stair_0RealE.loc[l, 'F.ID_X'] == Stair_12TestE.loc[k, 'F.ID_X']) & (Stair_0RealE.loc[l, 'F.ID_Y'] == Stair_12TestE.loc[k, 'F.ID_Y']):

                    zoom48.append(Stair_12TestE.BotCD[k])





Stair_0RealE["Edge_1314"] = zoom48





Zones_12= ["Zone1", "Zone3", "Zone4", "Zone8", "Zone7", "Zone5", "Zone6", "Zone2"]

zoom49 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_12)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC2.iat[0,j] :

            zoom49.append(SPEC2.iat[1,j])





#Adding the Positive SPEC Values

zoom511 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_1)):

        if Stair_0RealE.loc[k, 'Zones'] == SPEC21.iat[0,j] :

            zoom511.append(SPEC21.iat[1,j])







zoom50 = []

for k in range (len(Stair_0RealE)):

    for j in range(len(Zones_12)):

        if Stair_0RealE.loc[k, 'Zones'] == EDGE2.iat[0,j] :

            zoom50.append(EDGE2.iat[1,j])



Stair_0RealE["SPEC_12"] = zoom49

Stair_0RealE["SPEC_EDGE_12"] = zoom50

Stair_0RealE["SPEC_12Positive"] = zoom511







Stair_0RealE["CumError_12"] = (Stair_0RealE.BotCD + Stair_0RealE.Edge_23 + Stair_0RealE.Edge_34 +

Stair_0RealE.Edge_45 + Stair_0RealE.Edge_56 + Stair_0RealE.Edge_67 + Stair_0RealE.Edge_78 + Stair_0RealE.Edge_89 + Stair_0RealE.Edge_910 + Stair_0RealE.Edge_1011 + Stair_0RealE.Edge_1112 + Stair_0RealE.Edge_1213 + Stair_0RealE.Edge_1314) - Stair_0RealE.SPEC_EDGE_12





for k in range(len(Stair_0RealE)):

    if Stair_0RealE.loc[k, 'CumError_12'] < 0:

           Stair_0RealE["Abs_CumSPEC_12"] = abs(Stair_0RealE["CumError_12"]) - Stair_0RealE.SPEC_12

    elif Stair_0RealE.loc[k, 'CumError_12'] >= 0:

        Stair_0RealE["Abs_CumSPEC_12"] = abs(Stair_0RealE["CumError_12"]) - Stair_0RealE.SPEC_12Positive





#Pre-graph plot data massaging and Filtering to remove extreme fliers and thus ensure graphs are as neat as they should be



zoom51= ("Abs_CumSPEC","Abs_CumSPEC_1","Abs_CumSPEC_2","Abs_CumSPEC_3","Abs_CumSPEC_4","Abs_CumSPEC_5", "Abs_CumSPEC_6", "Abs_CumSPEC_7", "Abs_CumSPEC_8", "Abs_CumSPEC_9", "Abs_CumSPEC_10", "Abs_CumSPEC_11", "Abs_CumSPEC_12")

Deletable= []

for Abs_SPEC in zoom51:

    for Abs in list(Stair_0RealE.columns):

        if Abs_SPEC == Abs:

            for p in range(len(Stair_0RealE)):

                if Stair_0RealE.loc[p, Abs] > 2500:

                    Deletable.append(Stair_0RealE.index[p])







Stairs_0Real2E = Stair_0RealE.drop(Stair_0RealE.index[Deletable])

Stairs_0Real2E = Stairs_0Real2E.reset_index(drop=True)





#Concatenating the resulting dataframe for analysis



Stairs_0Real2EAll = pd.concat([Stairs_0Real2E, Stairs_0Real2A, Stairs_0Real2BCD], ignore_index=True)



















#Finally collating the Cum_Error's by zones and by WL definitions for B27A

#Zone 1

Zoning_1 = { "CumError_1": ['81', 'Z01-T01'], "CumError_2": ['83', 'Z01-T02'], "CumError_3": ['85', 'Z01-T03'], "CumError_4": ['87', 'Z01-T04'], "CumError_5": ['89','Z01-T05'], "CumError_6": ['91','Z01-T06'], "CumError_7": ['93', 'Z01-T07'], "CumError_8": ['95', 'Z01-T08'], "CumError_9": ['97','Z01-T09'], "CumError_10": ['99', 'Z01-T10'], "CumError_11": ['101', 'Z01-T11'], "CumError_12": ['103', 'Z01-T12'] }

#Zone 2

Zoning_2 = { "CumError_1": ['80', 'Z02-T01'], "CumError_2": ['82', 'Z02-T02'], "CumError_3": ['84', 'Z02-T03'], "CumError_4": ['86', 'Z02-T04'], "CumError_5": ['88', 'Z02-T05'], "CumError_6": ['90', 'Z02-T06'], "CumError_7": ['92', 'Z02-T07'], "CumError_8": ['94', 'Z02-T08'], "CumError_9": ['96','Z02-T09'], "CumError_10": ['98', 'Z02-T10'], "CumError_11": ['100', 'Z02-T11'], "CumError_12": ['102', 'Z02-T12'] }

#Zone 3

Zoning_3 = { "CumError_1": ['55', 'Z03-T01'], "CumError_2": ['57', 'Z03-T02'], "CumError_3": ['59', 'Z03-T03'], "CumError_4": ['61', 'Z03-T04'], "CumError_5": ['63', 'Z03-T05'], "CumError_6": ['65', 'Z03-T06'], "CumError_7": ['67', 'Z03-T07'], "CumError_8": ['69', 'Z03-T08'], "CumError_9": ['71', 'Z03-T09'], "CumError_10": ['73', 'Z03-T10'], "CumError_11": ['75', 'Z03-T11'], "CumError_12": ['77', 'Z03-T12'] }

#Zone 4

Zoning_4 = { "CumError_1": ['54', 'Z04-T01'], "CumError_2": ['56', 'Z04-T02'], "CumError_3": ['58', 'Z04-T03'], "CumError_4": ['60', 'Z04-T04'], "CumError_5": ['62', 'Z04-T05'], "CumError_6": ['64', 'Z04-T06'], "CumError_7": ['66', 'Z04-T07'], "CumError_8": ['68', 'Z04-T08'], "CumError_9": ['70', 'Z04-T09'], "CumError_10": ['72', 'Z04-T10'], "CumError_11": ['74', 'Z04-T11'], "CumError_12": ['76', 'Z04-T12'] }

#Zone 5

Zoning_5 = { "CumError_1": ['28', 'Z05-T01'], "CumError_2": ['30', 'Z05-T02'], "CumError_3": ['32', 'Z05-T03'], "CumError_4": ['34', 'Z05-T04'], "CumError_5": ['36', 'Z05-T05'], "CumError_6": ['38', 'Z05-T06'], "CumError_7": ['40', 'Z05-T07'], "CumError_8": ['42', 'Z05-T08'], "CumError_9": ['44', 'Z05-T09'], "CumError_10": ['46','Z05-T10'], "CumError_11": ['48', 'Z05-T11'], "CumError_12": ['50', 'Z05-T12'] }

#Zone 6

Zoning_6 = { "CumError_1": ['27', 'Z06-T01'], "CumError_2": ['29', 'Z06-T02'], "CumError_3": ['31', 'Z06-T03'], "CumError_4": ['33', 'Z06-T04'], "CumError_5": ['35', 'Z06-T05'], "CumError_6": ['37', 'Z06-T06'], "CumError_7": ['39', 'Z06-T07'], "CumError_8": ['41', 'Z06-T08'], "CumError_9": ['43', 'Z06-T09'], "CumError_10": ['45', 'Z06-T10'], "CumError_11": ['47', 'Z06-T11'], "CumError_12": ['49', 'Z06-T12'] }

#Zone 7

Zoning_7 = { "CumError_1": ['2', 'Z07-T01'], "CumError_2": ['4', 'Z07-T02'], "CumError_3": ['6', 'Z07-T03'], "CumError_4": ['8', 'Z07-T04'], "CumError_5": ['10', 'Z07-T05'], "CumError_6": ['12', 'Z07-T06'], "CumError_7": ['14', 'Z07-T07'], "CumError_8": ['16', 'Z07-T08'], "CumError_9": ['18', 'Z07-T09'], "CumError_10": ['20', 'Z07-T10'], "CumError_11": ['22', 'Z07-T11'], "CumError_12": ['24', 'Z07-T12'] }

#Zone 8

Zoning_8 = { "CumError_1": ['1', 'Z08-T01'], "CumError_2": ['3', 'Z08-T02'], "CumError_3": ['5', 'Z08-T03'], "CumError_4": ['7','Z08-T04'], "CumError_5": ['9', 'Z08-T05'], "CumError_6": ['11', 'Z08-T06'], "CumError_7": ['13', 'Z08-T07'], "CumError_8": ['15', 'Z08-T08'], "CumError_9": ['17', 'Z08-T09'], "CumError_10": ['19', 'Z08-T10'], "CumError_11": ['21', 'Z08-T11'], "CumError_12": ['23', 'Z08-T12'] }





#Zone1



Zoning_CumError = []

Zoning_WordLine = []

Zoning_EDGES = []

Zoning_lotid = []

Zoning_Site = []

Zoning_EP = []

Zoning_Intermediate = []

Zoning_Bottom = []

Zoning_Algorithm = []

Zoning_ProbeDieX = []

Zoning_ProbeDieY = []

Zoning_Location_X = []

Zoning_Location_Y = []

Zoning_target = []

Zoning_Recipe = []

Zoning_Date = []

Zoning_User_Name = []

Zoning_waferid = []

Zoning_Top_Major_Axis = []

Zoning_Top_Orientation = []

Zoning_Top_Minor_Axis = []

Zoning_MS_Major_Axis = []

Zoning_MS_Orientation = []

Zoning_MS_Minor_Axis = []

Zoning_Bottom_Major_Axis = []

Zoning_Bottom_Minor_Axis = []

Zoning_Slant = []

Zoning_Slant_Direction = []

Zoning_Tilt_Angle = []

Zoning_Tilt_Azimuth = []

Zoning_Vacc = []

Zoning_Wafer_Map_Image = []

Zoning_LWR_MainSlope = []

Zoning_LWR_Bottom = []

Zoning_RB_Top = []

Zoning_RB_MainSlope = []

Zoning_RB_Bottom = []

Zoning_CL_MainSlope = []

Zoning_CL_Bottom = []

Zoning_ISW_MainSlope = []

Zoning_ISW_Bottom = []

Zoning_ImeageMeasure = []

Zoning_LocationX_F = []

Zoning_LocationY_F = []

Zoning_RB_MIN = []

Zoning_RB_MAX = []

Zoning_Cog_Location_X = []

Zoning_Cog_Location_Y = []

Zoning_Model_offset_X = []

Zoning_Model_offset_Y = []

Zoning_MM_Success = []

Zoning_Meas_Params_Name = []

Zoning_Tool_ID = []

Zoning_PR_Vector_X = []

Zoning_PR_Vector_Y = []

Zoning_PR_Success = []

Zoning_WF_File_Path = []

Zoning_D_Number = []

Zoning_Recipe_Process = []

Zoning_Recipe_Product = []

Zoning_Recipe_Layer = []

Zoning_Field_Order = []

Zoning_Fit_Quality = []

Zoning_Die_ID_X = []

Zoning_Die_ID_Y = []

Zoning_DieLocation_X = []

Zoning_DieLocation_Y = []

Zoning_CogX_Intermediate = []

Zoning_CogY_Intermediate = []

Zoning_MiStageActualLocationZ = []

Zoning_MiVaccOffset = []

Zoning_ImagePR_Top = []

Zoning_ImagePR_Left = []

Zoning_ImagePR_Right = []

Zoning_PR_Score = []

Zoning_ROI_ID = []

Zoning_ROI_Type_ID = []

Zoning_Run_Index = []

Zoning_Run_Name = []

Zoning_Run_Repeat = []

Zoning_Run_Type = []

Zoning_Scan_orientation = []

Zoning_Target_Index = []

Zoning_Target_Repeat = []

Zoning_Time_Stamp = []

Zoning_Z_Stage = []

Zoning_UserFocusOffset = []

Zoning_MeasID = []

Zoning_MeasName = []

Zoning_Vwafer = []

Zoning_Max_AF_Grade_X = []

Zoning_Max_AF_Grade_Y = []

Zoning_WPC_Vspectrometer = []

Zoning_ROIName = []

Zoning_F_Tag_Bottom = []

Zoning_MeasBoxSizeX = []

Zoning_MeasBoxSizeY = []

Zoning_Run_Field_ID_X = []

Zoning_Run_Field_ID_Y = []

Zoning_Run_Field_Location_X = []

Zoning_Run_Field_Location_Y = []

Zoning_Mi_AF_BestResult_X = []

Zoning_Mi_AF_BestResult_Y = []

Zoning_Left_Detector_Gray = []

Zoning_Top_Detector_Gray = []

Zoning_Top_Inlimits = []

Zoning_VSpectrometer = []

Zoning_MM_Score = []

Zoning_Radius = []

Zoning_Region = []

Zoning_Zones = []

Zoning_WordLine = []

Zoning_CumError = []

Zoning_CumSPECNegative = []

Zoning_CumSPECPositive = []

Zoning_BotCD = []

Zoning_slotno = []

Zoning_F_Tag_Bottom_Real = []





for ii in range(len(Stairs_0Real2EAll)):

    if Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone1':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_1.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                    Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                    Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                    Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])





    elif Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone2':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_2.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                    Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                    Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                    Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])



    elif Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone3':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_3.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                   Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                    Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                    Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])





    elif Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone4':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_4.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                    Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                    Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                    Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])





    elif Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone5':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_5.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                    Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                   Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                   Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])





    elif Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone6':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_6.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                    Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                    Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                    Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])





    elif Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone7':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_7.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                    Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                    Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                    Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])



    elif Stairs_0Real2EAll.loc[ii, 'Zones'] == 'Zone1':

        for colname in list(Stairs_0Real2EAll.columns):

            for kk,vv in Zoning_8.items():

                if colname == kk:

                    Zoning_WordLine.append(vv[0])

                    Zoning_F_Tag_Bottom_Real.append(vv[1])

                    Zoning_BotCD.append(Stairs_0Real2EAll.loc[ii, 'BotCD'])

                    Zoning_Zones.append(Stairs_0Real2EAll.loc[ii, 'Zones'])

                    Zoning_Region.append(Stairs_0Real2EAll.loc[ii, 'Region'])

                    Zoning_Radius.append(Stairs_0Real2EAll.loc[ii, 'Radius'])

                    Zoning_ProbeDieY.append(Stairs_0Real2EAll.loc[ii, 'F.ID_Y'])

                    Zoning_ProbeDieX.append(Stairs_0Real2EAll.loc[ii, 'F.ID_X'])

                    Zoning_EDGES.append(Stairs_0Real2EAll.loc[ii, 'edges'])

                    Zoning_target.append(Stairs_0Real2EAll.loc[ii, 'Target_Name'])

                    Zoning_slotno.append(Stairs_0Real2EAll.loc[ii, 'Slot_ID'])

                    Zoning_waferid.append(Stairs_0Real2EAll.loc[ii, 'Wafer'])

                    Zoning_MM_Score.append(Stairs_0Real2EAll.loc[ii, 'MM_Score[%]'])

                    Zoning_VSpectrometer.append(Stairs_0Real2EAll.loc[ii, 'VSpectrometer[V]'])

                    Zoning_Top_Inlimits.append(Stairs_0Real2EAll.loc[ii, 'InLimits'])

                    Zoning_Top_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Top_Detector_Gray_Level_Factor[%]'])

                    Zoning_Left_Detector_Gray.append(Stairs_0Real2EAll.loc[ii, 'Left_Detector_Gray_Level_Factor[%]'])

                    Zoning_Mi_AF_BestResult_Y.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_Y'])

                    Zoning_Mi_AF_BestResult_X.append(Stairs_0Real2EAll.loc[ii, 'Mi_AF_BestResult_X'])

                    Zoning_Run_Field_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_Y'])

                    Zoning_Run_Field_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_Location_X'])

                    Zoning_Run_Field_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_Y'])

                    Zoning_Run_Field_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Run_Field_ID_X'])

                    Zoning_MeasBoxSizeY.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeY'])

                    Zoning_MeasBoxSizeX.append(Stairs_0Real2EAll.loc[ii, 'MeasBoxSizeX'])

                    Zoning_F_Tag_Bottom.append(Stairs_0Real2EAll.loc[ii, 'F_Tag_Bottom'])

                    Zoning_ROIName.append(Stairs_0Real2EAll.loc[ii, 'ROIName'])

                    Zoning_WPC_Vspectrometer.append(Stairs_0Real2EAll.loc[ii, 'WPC_Vspectrometer'])

                    Zoning_Max_AF_Grade_Y.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_Y'])

                    Zoning_Max_AF_Grade_X.append(Stairs_0Real2EAll.loc[ii, 'Max_AF_Grade_X'])

                    Zoning_Vwafer.append(Stairs_0Real2EAll.loc[ii, 'Vwafer'])

                    Zoning_MeasName.append(Stairs_0Real2EAll.loc[ii, 'MeasName'])

                    Zoning_MeasID.append(Stairs_0Real2EAll.loc[ii, 'MeasID'])

                    Zoning_UserFocusOffset.append(Stairs_0Real2EAll.loc[ii, 'UserFocusOffset'])

                    Zoning_Z_Stage.append(Stairs_0Real2EAll.loc[ii, 'Z_Stage'])

                    Zoning_Time_Stamp.append(Stairs_0Real2EAll.loc[ii, 'Time_Stamp'])

                    Zoning_Target_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Target_Repeat'])

                    Zoning_Target_Index.append(Stairs_0Real2EAll.loc[ii, 'Target_Index'])

                    Zoning_Scan_orientation.append(Stairs_0Real2EAll.loc[ii, 'Scan_orientation'])

                    Zoning_Run_Type.append(Stairs_0Real2EAll.loc[ii, 'Run_Type'])

                    Zoning_Run_Repeat.append(Stairs_0Real2EAll.loc[ii, 'Run_Repeat'])

                    Zoning_Run_Name.append(Stairs_0Real2EAll.loc[ii, 'Run_Name'])

                    Zoning_Run_Index.append(Stairs_0Real2EAll.loc[ii, 'Run_Index'])

                    Zoning_ROI_Type_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_Type_ID'])

                    Zoning_ROI_ID.append(Stairs_0Real2EAll.loc[ii, 'ROI_ID'])

                    Zoning_PR_Score.append(Stairs_0Real2EAll.loc[ii, 'PR_Score'])

                    Zoning_ImagePR_Right.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Right)'])

                    Zoning_ImagePR_Left.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Left)'])

                    Zoning_ImagePR_Top.append(Stairs_0Real2EAll.loc[ii, 'Image(PR_Top)'])

                    Zoning_MiVaccOffset.append(Stairs_0Real2EAll.loc[ii, 'MiVaccOffset'])

                    Zoning_MiStageActualLocationZ.append(Stairs_0Real2EAll.loc[ii, 'MiStageActualLocationZ'])

                    Zoning_CogY_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogY_Intermediate'])

                    Zoning_CogX_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'CogX_Intermediate'])

                    Zoning_DieLocation_X.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_X'])

                    Zoning_DieLocation_Y.append(Stairs_0Real2EAll.loc[ii, 'DieLocation_Y'])

                    Zoning_Die_ID_Y.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_Y'])

                    Zoning_Die_ID_X.append(Stairs_0Real2EAll.loc[ii, 'Die.ID_X'])

                    Zoning_Fit_Quality.append(Stairs_0Real2EAll.loc[ii, 'Fit_QuaLity'])

                    Zoning_Field_Order.append(Stairs_0Real2EAll.loc[ii, 'Field_Order'])

                    Zoning_Recipe_Layer.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Layer'])

                    Zoning_Recipe_Product.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Product'])

                    Zoning_Recipe_Process.append(Stairs_0Real2EAll.loc[ii, 'Recipe_Process'])

                    Zoning_D_Number.append(Stairs_0Real2EAll.loc[ii, 'D_Number'])

                    Zoning_WF_File_Path.append(Stairs_0Real2EAll.loc[ii, 'WF_File_Path'])

                    Zoning_PR_Success.append(Stairs_0Real2EAll.loc[ii, 'PR_Success'])

                    Zoning_PR_Vector_Y.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_Y'])

                    Zoning_PR_Vector_X.append(Stairs_0Real2EAll.loc[ii, 'PR_Vector_X'])

                    Zoning_Tool_ID.append(Stairs_0Real2EAll.loc[ii, 'Tool_ID'])

                    Zoning_Meas_Params_Name.append(Stairs_0Real2EAll.loc[ii, 'Meas_Params_Name'])

                    Zoning_MM_Success.append(Stairs_0Real2EAll.loc[ii, 'MM_Success'])

                    Zoning_Model_offset_Y.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_Y'])

                    Zoning_Model_offset_X.append(Stairs_0Real2EAll.loc[ii, 'Model_offset_X'])

                    Zoning_Cog_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_Y'])

                    Zoning_Cog_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Cog_Location_X'])

                    Zoning_RB_MAX.append(Stairs_0Real2EAll.loc[ii, 'RB_MAX/Right'])

                    Zoning_RB_MIN.append(Stairs_0Real2EAll.loc[ii, 'RB_MIN/Left'])

                    Zoning_LocationY_F.append(Stairs_0Real2EAll.loc[ii, 'LocationY_(field)'])

                    Zoning_LocationX_F.append(Stairs_0Real2EAll.loc[ii, 'LocationX_(field)'])

                    Zoning_ImeageMeasure.append(Stairs_0Real2EAll.loc[ii, 'Image(Measurer)'])

                    Zoning_ISW_Bottom.append(Stairs_0Real2EAll.loc[ii, 'ISW_Bottom'])

                    Zoning_ISW_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'ISW_MainSlope'])

                    Zoning_CL_Bottom.append(Stairs_0Real2EAll.loc[ii, 'CL_Bottom'])

                    Zoning_CL_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'CL_MainSlope'])

                    Zoning_RB_Bottom.append(Stairs_0Real2EAll.loc[ii, 'RB_Bottom'])

                    Zoning_RB_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'RB_MainSlope'])

                    Zoning_RB_Top.append(Stairs_0Real2EAll.loc[ii, 'RB_Top'])

                    Zoning_LWR_Bottom.append(Stairs_0Real2EAll.loc[ii, 'LWR_Bottom'])

                    Zoning_LWR_MainSlope.append(Stairs_0Real2EAll.loc[ii, 'LWR_MainSlope'])

                    Zoning_Wafer_Map_Image.append(Stairs_0Real2EAll.loc[ii, 'Wafer_Map_Image'])

                    Zoning_Vacc.append(Stairs_0Real2EAll.loc[ii, 'Vacc'])

                    Zoning_Tilt_Azimuth.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Azimuth'])

                    Zoning_Tilt_Angle.append(Stairs_0Real2EAll.loc[ii, 'Tilt_Angle'])

                    Zoning_Slant_Direction.append(Stairs_0Real2EAll.loc[ii, 'Slant_Direction'])

                    Zoning_Slant.append(Stairs_0Real2EAll.loc[ii, 'Slant'])

                    Zoning_Bottom_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Minor_Axis'])

                    Zoning_Bottom_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Bottom_Major_Axis'])

                    Zoning_MS_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Minor_Axis'])

                    Zoning_MS_Orientation.append(Stairs_0Real2EAll.loc[ii, 'MS_Orientation'])

                    Zoning_MS_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'MS_Major_Axis'])

                    Zoning_Top_Minor_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Minor_Axis'])

                    Zoning_Top_Orientation.append(Stairs_0Real2EAll.loc[ii, 'Top_Orientation'])

                    Zoning_Top_Major_Axis.append(Stairs_0Real2EAll.loc[ii, 'Top_Major_Axis'])

                    Zoning_User_Name.append(Stairs_0Real2EAll.loc[ii, 'User_Name'])

                    Zoning_Date.append(Stairs_0Real2EAll.loc[ii, 'Date'])



                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_Recipe.append(Stairs_0Real2EAll.loc[ii, 'Recipe'])

                    Zoning_Location_Y.append(Stairs_0Real2EAll.loc[ii, 'Location_Y'])

                    Zoning_Location_X.append(Stairs_0Real2EAll.loc[ii, 'Location_X'])



                    Zoning_Algorithm.append(Stairs_0Real2EAll.loc[ii, 'Algorithm'])

                    Zoning_Bottom.append(Stairs_0Real2EAll.loc[ii, 'Bottom'])

                    Zoning_Intermediate.append(Stairs_0Real2EAll.loc[ii, 'Intermediate'])

                    Zoning_EP.append(Stairs_0Real2EAll.loc[ii, 'EP'])

                    Zoning_Site.append(Stairs_0Real2EAll.loc[ii, 'Site'])

                    Zoning_lotid.append(Stairs_0Real2EAll.loc[ii, 'Lot'])

                    Zoning_CumError.append(Stairs_0Real2EAll.loc[ii, kk])

                    Zoning_CumSPECNegative.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-3])

                    Zoning_CumSPECPositive.append(Stairs_0Real2EAll.iloc[ii, (Stairs_0Real2EAll.columns.get_loc(kk))-1])









#Collating the new columns together for plotting and correlation analysis

import numpy as np

Finally_Route = np.vstack((Zoning_Site, Zoning_EP, Zoning_Intermediate, Zoning_Bottom, Zoning_Algorithm,\

                           Zoning_ProbeDieX, Zoning_ProbeDieY, Zoning_Location_X, Zoning_Location_Y, Zoning_target, Zoning_Recipe, Zoning_lotid, Zoning_slotno, \

                           Zoning_Date, Zoning_User_Name, Zoning_waferid, Zoning_Top_Major_Axis, Zoning_Top_Orientation, Zoning_Top_Minor_Axis,\

                           Zoning_MS_Major_Axis, Zoning_MS_Orientation, Zoning_MS_Minor_Axis, Zoning_Bottom_Major_Axis, Zoning_Bottom_Minor_Axis,\

                           Zoning_Slant, Zoning_Slant_Direction, Zoning_Tilt_Angle, Zoning_Tilt_Azimuth, Zoning_Vacc, Zoning_Wafer_Map_Image,\

                           Zoning_LWR_MainSlope, Zoning_LWR_Bottom, Zoning_RB_Top, Zoning_RB_MainSlope, Zoning_RB_Bottom, Zoning_CL_MainSlope,\

                           Zoning_CL_Bottom, Zoning_ISW_MainSlope, Zoning_ISW_Bottom, Zoning_ImeageMeasure, Zoning_LocationX_F, Zoning_LocationY_F,\

                           Zoning_RB_MIN, Zoning_RB_MAX, Zoning_Cog_Location_X, Zoning_Cog_Location_Y, Zoning_Model_offset_X, Zoning_Model_offset_Y,\

                           Zoning_MM_Success, Zoning_Meas_Params_Name, Zoning_Tool_ID, Zoning_PR_Vector_X, Zoning_PR_Vector_Y, Zoning_PR_Success,\

                           Zoning_WF_File_Path, Zoning_D_Number, Zoning_Recipe_Process, Zoning_Recipe_Product, Zoning_Recipe_Layer, Zoning_Field_Order,\

                           Zoning_Fit_Quality, Zoning_Die_ID_X, Zoning_Die_ID_Y, Zoning_DieLocation_X, Zoning_DieLocation_Y, Zoning_CogX_Intermediate, Zoning_CogY_Intermediate,\

                           Zoning_MiStageActualLocationZ, Zoning_MiVaccOffset, Zoning_ImagePR_Top, Zoning_ImagePR_Left, Zoning_ImagePR_Right, Zoning_PR_Score, Zoning_ROI_ID,\

                           Zoning_ROI_Type_ID, Zoning_Run_Index, Zoning_Run_Name, Zoning_Run_Repeat, Zoning_Run_Type, Zoning_Scan_orientation, Zoning_Target_Index, Zoning_Target_Repeat,Zoning_Time_Stamp,\

                           Zoning_Z_Stage, Zoning_UserFocusOffset, Zoning_MeasID, Zoning_MeasName, Zoning_Vwafer, Zoning_Max_AF_Grade_X, Zoning_Max_AF_Grade_Y, Zoning_WPC_Vspectrometer, Zoning_ROIName,\

                           Zoning_F_Tag_Bottom, Zoning_MeasBoxSizeX, Zoning_MeasBoxSizeY, Zoning_Run_Field_ID_X, Zoning_Run_Field_ID_Y, Zoning_Run_Field_Location_X, Zoning_Run_Field_Location_Y, Zoning_Mi_AF_BestResult_X, Zoning_Mi_AF_BestResult_Y,\

                           Zoning_Left_Detector_Gray, Zoning_Top_Detector_Gray, Zoning_Top_Inlimits, Zoning_VSpectrometer, Zoning_MM_Score,\

                           Zoning_Radius, Zoning_Region, Zoning_Zones, Zoning_WordLine, Zoning_CumError, Zoning_CumSPECNegative, Zoning_CumSPECPositive,Zoning_F_Tag_Bottom_Real ))

Finally_Route = Finally_Route.transpose()



Zones = ["Site", "EP", "Intermediate", "Bottom", "Algorithm", "F.ID_X","F.ID_Y", "Location_X", "Location_Y", "Target_Name", "Recipe", "Lot","Slot_ID",\

         "Date", "User_Name", "Wafer", "Top_Major_Axis", "Top_Orientation", "Top_Minor_Axis", "MS_Major_Axis", "MS_Orientation",\

         "MS_Minor_Axis", "Bottom_Major_Axis", "Bottom_Minor_Axis", "Slant", "Slant_Direction", "Tilt_Angle", "Tilt_Azimuth", "Vacc", "wafer_Map_Image", "LWR_MainSlope", "LWR_Bottom",\

         "RB_Top", "RB_MainSlope", "RB_Bottom","CL_MainSlope", "CL_Bottom", "ISW_MainSlope", "ISW_Bottom", "ImageMeasure", "LocationX_(field)" , "LocationY_(field)", "RB_MIN/Left", "RB_MAX/Right",\

         "Cog_Location_X", "Cog_Location_Y", "Model_offset_X", "Model_offset_Y", "MM_Sucess", "Meas_Params_Name", "Tool_ID", "PR_Vector_X", "PR_Vector_Y", "PR_Success", "WF_File_Path",\

         "D_Number", "Recipe_Process", "Recipe_Product", "Recipe_Layer", "Field_Order", "Fit_QuaLity", "Die.ID_X", "Die.ID_Y",  "DieLocation_X", "DieLocation_Y", "CogX_Intermediate", "CogY_Intermediate",\

         "MiStageActualLocationZ", "MiVaccOffset", "Image(PR_Top)",  "Image(PR_Left)", "Image(PR_Right)", "PR_Score", "ROI_ID", "ROI_Type_ID", "Run_Index", "Run_Name", "Run_Repeat", "Run_Type",\

         "Scan_Orientation", "Target_Index", "Target_Repeat", "Time_Stamp", "Z_Stage", "UserFocusOffset", "MeasID", "MeasName", "Vwafer", "Max_AF_Grade_X", "Max_AF_Grade_Y", "WPC_Vspectrometer",\

         "ROIName", "F_Tag_BottomR", "MeasBoxSizeX", "MeasBoxSizeY", "Run_Field_ID_X", "Run_Field_ID_Y", "Run_Field_Location_X", "Run_Field_Location_Y", "Mi_AF_BestResult_X", "Mi_AF_BestResult_Y",\

         "Left_Detector_Gray_Level_Factor[%]", "Top_Detector_Gray_Level_Factor[%]", "InLimits", "VSpectrometer[V]", "MM_Score", "Radius", "Probe-Region", "StairCase_Zones", "WORDLINE", "Cum_Error", "SPECNegative", "SPECPositive", "F_Tag_Bottom"]



import pandas as pd

Finally_True = pd.DataFrame(Finally_Route, columns= Zones)





Finally_True.to_csv('C:\\Users\\TALABI\\B27A_57byWLCuMError.cst', sep = '\t')



#Emailing a dataframe object to yourself for manipulation in JMP

#Saving the Dataframe as an excel file

from pandas import ExcelWriter


writer = ExcelWriter('C:\\Users\\TALABI\\B27A_57byWL_CumError.xlsx')

Finally_True.to_excel(writer,'Sheet1')

writer.save()




#Sending the dataframe excel file as an email attachement to myself

import win32com.client as win32

outlook = win32.Dispatch('outlook.application')

mail = outlook.CreateItem(0)

mail.To = 'talabi@micron.com'

mail.Subject = '57byWL_CuMError_Attachment'

mail.Body = 'This is an autogenerated email with attachement of the 57 by WL cum Error'

mail.HTMLBody = '<h2>HTML Message body</h2>'# this field is optional


#In case you want to attach a file to the email

attachment  = "C:\\Users\\TALABI\\B27A_57byWLCuMError.cst"

mail.Attachments.Add(attachment)


mail.Send()





#######################################################################################################################################################################################################

#####################             ########################             ####################################################################             ###############################################

#####################               ###################                ######################################################################          ################################################

#####################                 ###############                  ########################################################################        ################################################

#####################                   ###########                    ##########################################################################     #################################################

#####################                    #########                     ###########################################################################   ##################################################

#####################                     #######                      ###########################################################################  ###################################################

#####################                      #####                       ########################################################################### ####################################################

#####################                       ###                        ################################################################################################################################

#####################                        #                         ################################################################################################################################

#####################            #                        #            ################################################################################################################################

#####################            ##                      ##            ####################################################    ########################################################################

#####################            ###                    ###            #######################################                 ########################################################################

#####################            ####                  ####            ##################################                      ########################################################################

#####################            #####                #####            ###############################       #############     ########################################################################

#####################            ######              ######            ############################      #################     ########################################################################

#####################            #######            #######            ##########################     ####################     ########################################################################

#####################            ##########################            #########################     #####################     ########################################################################

#####################            ##########################            ########################     ######################     ########################################################################

#####################            ##########################            ########################     ######################     ########################################################################

#####################            ##########################            ########################     ######################     ########################################################################

#####################            ##########################            ########################      #####################     ########################################################################

###############                         #############                        ###################       ###################     ########################################################################

###############                         #############                        #####################       #################     ########################################################################

###############                         #############                        ########################                             ###################################################################

########################################################################################################################################################################################################
